var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var ChatType;
(function (ChatType) {
    ChatType[ChatType["MESSAGE"] = 0] = "MESSAGE";
    ChatType[ChatType["MORE"] = 1] = "MORE";
    ChatType[ChatType["TIP"] = 2] = "TIP";
    ChatType[ChatType["TIME"] = 3] = "TIME";
})(ChatType || (ChatType = {}));
var EVENT_REFRESH_USERS = 'refresh_users', EVENT_REFRESH_GROUPS = 'refresh_groups', EVENT_GROUP_USERS = 'refresh_group_users', EVENT_USER_GROUPS = 'user_groups', EVENT_USER_INFO = 'user_info', EVENT_GROUP_INFO = 'group_info', EVENT_SEARCH_USERS = 'search_users', EVENT_SEARCH_GROUPS = 'search_groups', EVENT_APPLY_USERS = 'apply_users', EVENT_ADD_USER = 'add_user', EVENT_APPLY_USER = 'apply_user', EVENT_SEND_MESSAGE = 'send_message', EVENT_GET_MESSAGE = 'get_message', HTML_MAIN = "<div class=\"dialog-box dialog-chat-box\">\n    <div class=\"dialog-header\">\n        <div class=\"dialog-action\">\n            <i class=\"fa fa-plus\"></i>\n            <i class=\"fa fa-minus\"></i>\n            <i class=\"fa fa-close\"></i>\n        </div>\n    </div>\n    <div class=\"dialog-info\">\n        <div class=\"dialog-info-avatar\">\n            <img src=\"\" alt=\"\">\n        </div>\n        <div class=\"dialog-info-name\">\n            <h3></h3>\n            <p>......</p>\n        </div>\n        <div class=\"dialog-message-count\">\n            99\n        </div>\n    </div>\n    <div class=\"dialog-tab\">\n        <div class=\"dialog-tab-header\">\n            <div class=\"dialog-tab-item active\">\n                <i class=\"fa fa-comment\"></i>\n            </div><div class=\"dialog-tab-item\">\n                <i class=\"fa fa-user\"></i>\n            </div><div class=\"dialog-tab-item\">\n                <i class=\"fa fa-comments\"></i>\n            </div>\n        </div>\n        <div class=\"dialog-tab-box\">\n            <div class=\"dialog-tab-item active\">\n            </div>\n            <div class=\"dialog-tab-item\">\n            </div>\n            <div class=\"dialog-tab-item\">\n            </div>\n        </div>\n    </div>\n    <div class=\"dialog-menu\">\n        <ul>\n            <li>\n                <i class=\"fa fa-eye\"></i>\n                \u67E5\u770B\u8D44\u6599</li>\n            <li>\n                <i class=\"fa fa-bookmark\"></i>\n                \u79FB\u52A8\u597D\u53CB</li>\n            <li>\n                <i class=\"fa fa-trash\"></i>\n                \u5220\u9664\u597D\u53CB</li>\n        </ul>\n    </div>\n</div>", HTML_ROOM = "<div class=\"dialog-box dialog-chat-room\">\n    <div class=\"dialog-header\">\n        <div class=\"dialog-title\">\u4E0E xx \u804A\u5929\u4E2D</div>\n        <div class=\"dialog-action\">\n            <i class=\"fa fa-minus\"></i>\n            <i class=\"fa fa-close\"></i>\n        </div>\n    </div>\n    <div class=\"dialog-message-box\">\n        \n    </div>\n    <div class=\"dialog-message-tools\">\n        <i class=\"fa fa-smile\"></i>\n        <i class=\"fa fa-image\"></i>\n        <i class=\"fa fa-camera\"></i>\n        <i class=\"fa fa-video\"></i>\n        <i class=\"fa fa-file\"></i>\n        <i class=\"fa fa-gift\"></i>\n    </div>\n    <div class=\"dialog-message-editor\">\n        <div class=\"dialog-message-text\" contenteditable=\"true\">\n\n        </div>\n        <div class=\"dailog-message-action\">\n            <button>\u53D1\u9001</button>\n        </div>\n    </div>\n</div>", HTML_SEARCH_USER = "<div class=\"dialog-box dialog-search-box\">\n    <div class=\"dialog-header\">\n        <div class=\"dialog-title dialog-tab-header\">\n            <div class=\"dialog-tab-item active\">\u627E\u4EBA</div>\n            <div class=\"dialog-tab-item\">\u627E\u7FA4</div>\n        </div>\n        <div class=\"dialog-action\">\n            <i class=\"fa fa-close\"></i>\n        </div>\n    </div>\n    <div class=\"dialog-search\">\n        <input type=\"text\">\n        <i class=\"fa fa-search\"></i>\n    </div>\n    <div class=\"dialog-search-list\">\n    </div>\n</div>", HTML_USER_INFO = "<div class=\"dialog-box dialog-user-box\">\n    <div class=\"dialog-header\">\n        <div class=\"dialog-action\">\n            <i class=\"fa fa-close\"></i>\n        </div>\n    </div>\n    <div class=\"dialog-user-avatar\">\n        <img src=\"./image/avatar.jpg\" alt=\"\">\n    </div>\n    <h3 class=\"user-name\">1231</h3>\n    <div class=\"dialog-user-info\">\n        <p class=\"user-brief\">123123</p>\n        <p>123123</p>\n        <p>123123</p>\n    </div>\n</div>", HTML_APPLY = "<div class=\"dialog-box dialog-apply-box\">\n    <div class=\"dialog-header\">\n        <div class=\"dialog-action\">\n            <i class=\"fa fa-close\"></i>\n        </div>\n    </div>\n    <div class=\"dialog-user-avatar\">\n        <img src=\"./image/avatar.jpg\" alt=\"\">\n    </div>\n    <h3 class=\"user-name\">1231</h3>\n    <div class=\"dialog-add-action\">\n        <textarea name=\"\" placeholder=\"\u6211\u662F123123\"></textarea>\n        <select name=\"\" id=\"\">\n            <option value=\"\">\u9009\u62E9\u5206\u7EC4</option>\n        </select>\n        <button class=\"dialog-yes\">\u7533\u8BF7</button>\n    </div>\n</div>", HTML_AGREE_APPLY = "<div class=\"dialog-box dialog-add-box\">\n    <div class=\"dialog-header\">\n        <div class=\"dialog-action\">\n            <i class=\"fa fa-close\"></i>\n        </div>\n    </div>\n    <div class=\"dialog-user-avatar\">\n        <img src=\"./image/avatar.jpg\" alt=\"\">\n    </div>\n    <h3 class=\"user-name\">1231</h3>\n    <p class=\"user-brief\">\u7559\u8A00</p>\n    <div class=\"dialog-add-action\">\n        <select name=\"\" id=\"\">\n            <option value=\"\">\u9009\u62E9\u5206\u7EC4</option>\n        </select>\n        <button class=\"dialog-yes\">\u540C\u610F</button>\n        <button>\u62D2\u7EDD</button>\n    </div>\n</div>", HTML_APPLY_LOG = "<div class=\"dialog-box dialog-apply-log-box\">\n    <div class=\"dialog-header\">\n        <div class=\"dialog-title\">\u9A8C\u8BC1\u6D88\u606F</div>\n        <div class=\"dialog-action\">\n            <i class=\"fa fa-close\"></i>\n        </div>\n    </div>\n    <div class=\"dialog-apply-list\">\n        <div class=\"dialog-info\" data-id=\"2\">\n            <div class=\"dialog-info-avatar\">\n                <img src=\"http://zodream.localhost/assets/images/avatar/18.png\" alt=\"\">\n            </div>\n            <div class=\"dialog-info-name\">\n                <h3>1606282309</h3>\n                <p>\u9644\u52A0\u6D88\u606F\uFF1A123</p>\n            </div>\n            <div class=\"dialog-action\">\n                <button>\u540C\u610F</button>\n                <button>\u5FFD\u7565</button>\n            </div>\n        </div>\n    </div>\n</div>";
var ChatBaseBox = /** @class */ (function () {
    function ChatBaseBox() {
        this.cache_element = {};
    }
    ChatBaseBox.prototype.find = function (tag) {
        if (this.cache_element.hasOwnProperty(tag)) {
            return this.cache_element[tag];
        }
        return this.cache_element[tag] = this.box.find(tag);
    };
    ChatBaseBox.prototype.show = function () {
        this.box.show();
        return this;
    };
    /**
     * center
     */
    ChatBaseBox.prototype.center = function () {
        this.box.css({
            left: Math.max(0, ($(window).width() - this.box.outerWidth()) / 2) + "px",
            top: Math.max(0, ($(window).height() - this.box.outerHeight()) / 2) + "px"
        });
        return this;
    };
    ChatBaseBox.prototype.hide = function () {
        this.box.hide();
    };
    ChatBaseBox.format = function (arg) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return arg.replace(/\{(\d+)\}/g, function (m, i) {
            return args[i];
        });
    };
    return ChatBaseBox;
}());
var ChatMenu = /** @class */ (function (_super) {
    __extends(ChatMenu, _super);
    /**
     *
     */
    function ChatMenu(box, menus) {
        var _this_1 = _super.call(this) || this;
        _this_1.box = box;
        _this_1._menus = [];
        _this_1._events = {};
        _this_1.bindEvent();
        _this_1.menus = menus;
        return _this_1;
    }
    Object.defineProperty(ChatMenu.prototype, "menus", {
        set: function (v) {
            this._menus = v;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    ChatMenu.prototype.on = function (event, callback) {
        this._events[event] = callback;
        return this;
    };
    ChatMenu.prototype.hasEvent = function (event) {
        return this._events.hasOwnProperty(event);
    };
    ChatMenu.prototype.trigger = function (event) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!this.hasEvent(event)) {
            return;
        }
        return (_a = this._events[event]).call.apply(_a, __spreadArrays([this], args));
    };
    ChatMenu.prototype.bindEvent = function () {
        var _this = this;
        this.box.on('click', 'li', function (e) {
            if (_this.clickLi($(this)) === false) {
                e.stopPropagation();
            }
        });
    };
    ChatMenu.prototype.clickLi = function (li) {
        var name = li.attr('data-name'), menu;
        if (name && this._menuMap.hasOwnProperty(name)) {
            menu = this._menuMap[name];
            if (menu && menu.onclick && menu.onclick(li, this.target, this) === false) {
                return;
            }
        }
        if (name && this.hasEvent(name) && this.trigger(name, li, menu, this.target, this) === false) {
            return;
        }
        return this.trigger('click', li, menu, this.target);
    };
    ChatMenu.prototype.addMenu = function (menu) {
        this._menus.push(menu);
        this.refresh();
        return this;
    };
    ChatMenu.prototype.showPosition = function (x, y, target) {
        this.refresh();
        var width = $(window).width(), boxWidth = this.box.outerWidth();
        x = Math.max(0, Math.min(x, width - boxWidth));
        y = Math.max(0, Math.min(y, $(window).height() - this.box.outerHeight()));
        this.box.css({
            'left': x + 'px',
            'top': y + 'px'
        }).toggleClass('menu-left', width - x + 80 < 2 * boxWidth).show();
        this.target = target;
        return this;
    };
    ChatMenu.prototype.hide = function () {
        this.box.hide();
        this.target = null;
    };
    ChatMenu.prototype.refresh = function () {
        this._menuMap = {};
        var menus = this.cleanMenuList(this._menus), html = menus ? this.getMenuHtml(menus) : '';
        this.box.html(html);
    };
    /**
     * setChildrenMenu
     */
    ChatMenu.prototype.setChildrenMenu = function (name, menus) {
        if (!this._menuMap.hasOwnProperty(name)) {
            return;
        }
        this._menuMap[name].children = menus;
        this.refresh();
    };
    ChatMenu.prototype.getMenuHtml = function (menus) {
        var _this_1 = this;
        var html = '';
        menus.forEach(function (menu) {
            html += _this_1.getMenuItemHtml(menu);
        });
        return '<ul>' + html + '</ul>';
    };
    ChatMenu.prototype.getMenuItemHtml = function (menu) {
        var name = (menu.name || menu.text), html = '<li data-name="' + name
            + '"><span>' + (menu.icon ? '<i class="fa fa-' + menu.icon + '"></i>' : '') + (menu.text || menu.name), menus = this.cleanMenuList(menu.children);
        this._menuMap[name] = menu;
        if (menus && menus.length > 0) {
            return html + '<i class="fa fa-chevron-right"></i></span>' + this.getMenuHtml(menus) + '</li>';
        }
        return html + '</span></li>';
    };
    ChatMenu.prototype.cleanMenuList = function (menus) {
        var _this_1 = this;
        if (!menus || menus.length == 0) {
            return null;
        }
        var real_menu = [];
        menus.forEach(function (menu) {
            if (menu.toggle && menu.toggle(_this_1.target, _this_1) === false) {
                return;
            }
            real_menu.push(menu);
        });
        return real_menu;
    };
    return ChatMenu;
}(ChatBaseBox));
var ChatAddUserBox = /** @class */ (function (_super) {
    __extends(ChatAddUserBox, _super);
    /**
     *
     */
    function ChatAddUserBox(parent) {
        var _this_1 = _super.call(this) || this;
        _this_1.parent = parent;
        return _this_1;
    }
    Object.defineProperty(ChatAddUserBox.prototype, "groups", {
        set: function (args) {
            this._groups = args;
            this.renderGroup();
        },
        enumerable: true,
        configurable: true
    });
    ChatAddUserBox.prototype.bindEvent = function () {
        var _this = this;
        this.box.on('click', '.dialog-add-action .dialog-yes', function () {
            _this.parent.trigger(EVENT_ADD_USER, _this._user, _this.find('select').val(), _this);
        });
    };
    ChatAddUserBox.prototype.render = function () {
        if (!this.box) {
            this.box = this.parent.append(HTML_AGREE_APPLY);
            this.bindEvent();
        }
    };
    ChatAddUserBox.prototype.showWithUser = function (user) {
        this.render();
        this.parent.trigger(EVENT_USER_GROUPS, this);
        this._user = user.applier || user.user;
        this.refresh();
        this.center().show();
    };
    ChatAddUserBox.prototype.refresh = function () {
        this.find('.dialog-user-avatar img').attr('src', this._user.avatar);
        this.find('.user-name').text(this._user.name);
        this.find('.user-breif').text(this._user.brief);
    };
    /**
     * renderGroup
     */
    ChatAddUserBox.prototype.renderGroup = function () {
        var html = '<option value="">选择分组</option>';
        this._groups.forEach(function (item) {
            html += '<option value="' + item.id + '">' + item.name + '</option>';
        });
        this.find('select').html(html);
    };
    return ChatAddUserBox;
}(ChatBaseBox));
var ChatApplyBox = /** @class */ (function (_super) {
    __extends(ChatApplyBox, _super);
    /**
     *
     */
    function ChatApplyBox(parent) {
        var _this_1 = _super.call(this, parent) || this;
        _this_1.parent = parent;
        return _this_1;
    }
    ChatApplyBox.prototype.bindEvent = function () {
        var _this = this;
        this.box.on('click', '.dialog-add-action .dialog-yes', function () {
            _this.parent.trigger(EVENT_APPLY_USER, _this._user, _this.find('select').val(), _this.find('textarea').val(), _this);
        });
    };
    ChatApplyBox.prototype.render = function () {
        if (!this.box) {
            this.box = this.parent.append(HTML_APPLY);
            this.bindEvent();
        }
    };
    return ChatApplyBox;
}(ChatAddUserBox));
var ChatUserInfoBox = /** @class */ (function (_super) {
    __extends(ChatUserInfoBox, _super);
    /**
     *
     */
    function ChatUserInfoBox(parent) {
        var _this_1 = _super.call(this) || this;
        _this_1.parent = parent;
        return _this_1;
    }
    Object.defineProperty(ChatUserInfoBox.prototype, "user", {
        get: function () {
            return this._user;
        },
        set: function (v) {
            this._user = v;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * showWithUser
     */
    ChatUserInfoBox.prototype.showWithUser = function (user) {
        if (!this.box) {
            this.box = this.parent.append(HTML_USER_INFO);
        }
        this.user = user;
        this.center().show();
    };
    ChatUserInfoBox.prototype.refresh = function () {
        this.find('.dialog-user-avatar img').attr('src', this._user.user.avatar);
        this.find('.user-name').text(this._user.name);
        this.find('.user-breif').text(this._user.user.brief);
    };
    return ChatUserInfoBox;
}(ChatBaseBox));
var ChatApplyLogBox = /** @class */ (function (_super) {
    __extends(ChatApplyLogBox, _super);
    /**
     *
     */
    function ChatApplyLogBox(parent) {
        var _this_1 = _super.call(this) || this;
        _this_1.parent = parent;
        _this_1._users = [];
        return _this_1;
    }
    Object.defineProperty(ChatApplyLogBox.prototype, "users", {
        set: function (v) {
            this._users = v;
            this.render();
        },
        enumerable: true,
        configurable: true
    });
    ChatApplyLogBox.prototype.showWithRefresh = function () {
        if (!this.box) {
            this.box = this.parent.append(HTML_APPLY_LOG);
            this.bindEvent();
        }
        this.parent.trigger(EVENT_APPLY_USERS, this);
        this.show();
    };
    ChatApplyLogBox.prototype.render = function () {
        var tpl = "<div class=\"dialog-info\" data-id=\"{0}\">\n        <div class=\"dialog-info-avatar\">\n            <img src=\"{1}\" alt=\"\">\n        </div>\n        <div class=\"dialog-info-name\">\n            <h3>{2}</h3>\n            <p>\u9644\u52A0\u6D88\u606F\uFF1A{3}</p>\n        </div>\n        <div class=\"dialog-action\">\n            <button>\u540C\u610F</button>\n            <button>\u5FFD\u7565</button>\n        </div>\n    </div>", html = '';
        this._users.forEach(function (user) {
            html += ChatSearchBox.format(tpl, user.id, user.applier.avatar, user.applier.name, user.remark || '');
        });
        this.find('.dialog-apply-list').html(html);
    };
    /**
     * bindEvent
     */
    ChatApplyLogBox.prototype.bindEvent = function () {
        var _this = this;
        this.box.on('click', '.dialog-apply-list .dialog-info', function () {
            var user = _this.getUser($(this).data('id'));
            _this.parent.addBox.showWithUser(user);
        });
    };
    ChatApplyLogBox.prototype.getUser = function (id) {
        for (var i = 0; i < this._users.length; i++) {
            if (this._users[i].id == id) {
                return this._users[i];
            }
        }
        return null;
    };
    return ChatApplyLogBox;
}(ChatBaseBox));
var ChatSearchBox = /** @class */ (function (_super) {
    __extends(ChatSearchBox, _super);
    /**
     *
     */
    function ChatSearchBox(parent) {
        var _this_1 = _super.call(this) || this;
        _this_1.parent = parent;
        _this_1._is_search_user = true;
        _this_1._users = [];
        return _this_1;
    }
    Object.defineProperty(ChatSearchBox.prototype, "users", {
        set: function (v) {
            this._users = v;
            this.render();
        },
        enumerable: true,
        configurable: true
    });
    ChatSearchBox.prototype.render = function () {
        var tpl = "<div class=\"dialog-info\" data-id=\"{3}\">\n        <div class=\"dialog-info-avatar\">\n            <img src=\"{0}\" alt=\"\">\n        </div>\n        <div class=\"dialog-info-name\">\n            <h3>{1}</h3>\n            <p>{2}</p>\n        </div>\n    </div>", html = '';
        this._users.forEach(function (user) {
            html += ChatSearchBox.format(tpl, user.avatar, user.name, user.brief || '', user.id);
        });
        this.find('.dialog-search-list').html(html);
    };
    /**
     * bindEvent
     */
    ChatSearchBox.prototype.bindEvent = function () {
        var _this = this;
        this.box.on('click', '.dialog-search-list .dialog-info', function () {
            var user = _this.getUser($(this).data('id'));
            _this.parent.applyBox.showWithUser({ user: user, id: 0, remark: '' });
        })
            .on('click', '.dialog-tab-header .dialog-tab-item', function () {
            var $this = $(this);
            $this.addClass('active').siblings().removeClass('active');
            _this._is_search_user = $this.index() < 1;
        }).on('keyup', '.dialog-search input', function () {
            _this.parent.trigger(_this._is_search_user
                ? EVENT_SEARCH_USERS : EVENT_SEARCH_GROUPS, $(this).val(), _this);
        });
    };
    ChatSearchBox.prototype.getUser = function (id) {
        for (var i = 0; i < this._users.length; i++) {
            if (this._users[i].id == id) {
                return this._users[i];
            }
        }
        return null;
    };
    ChatSearchBox.prototype.renderBox = function () {
        if (!this.box) {
            this.box = this.parent.append(HTML_SEARCH_USER);
            this.bindEvent();
        }
    };
    /**
     * showCenter
     */
    ChatSearchBox.prototype.showCenter = function () {
        this.renderBox();
        this.center().show();
    };
    /**
     * show
     */
    ChatSearchBox.prototype.show = function () {
        this.renderBox();
        this.box.show();
        return this;
    };
    return ChatSearchBox;
}(ChatBaseBox));
var ChatEditor = /** @class */ (function () {
    function ChatEditor(box, parent) {
        this.box = box;
        this.parent = parent;
    }
    ChatEditor.prototype.html = function () {
        return this.box.html();
    };
    /**
     * clear
     */
    ChatEditor.prototype.clear = function () {
        this.box.html('');
        return this;
    };
    ChatEditor.prototype.text = function () {
        return this.box.text();
    };
    ChatEditor.prototype.insertHtmlAtCaret = function (html) {
        var sel, range, editor = this.box;
        if (!editor.is(":focus")) {
            editor.focus();
            range = document.createRange();
            range.setStartAfter(editor[0]);
            range.setEnd(editor[0], editor[0].childNodes.length);
        }
        if (!window.getSelection) {
            return;
        }
        sel = window.getSelection();
        if (!sel.getRangeAt || !sel.rangeCount) {
            return;
        }
        if (!range) {
            range = sel.getRangeAt(0);
            range.deleteContents();
        }
        var el = document.createElement("div");
        el.innerHTML = html;
        var frag = document.createDocumentFragment(), node, lastNode;
        while ((node = el.firstChild)) {
            lastNode = frag.appendChild(node);
        }
        range.insertNode(frag);
        if (lastNode) {
            range = range.cloneRange();
            range.setStartAfter(lastNode);
            range.collapse(true);
            sel.removeAllRanges();
            sel.addRange(range);
        }
    };
    return ChatEditor;
}());
var ChatMessageBox = /** @class */ (function (_super) {
    __extends(ChatMessageBox, _super);
    /**
     *
     */
    function ChatMessageBox(parent, send, revice) {
        var _this_1 = _super.call(this) || this;
        _this_1.parent = parent;
        _this_1.send = send;
        _this_1.revice = revice;
        _this_1._messages = [];
        _this_1.box = _this_1.parent.append(HTML_ROOM);
        _this_1.refresh();
        _this_1.bindEvent();
        return _this_1;
    }
    Object.defineProperty(ChatMessageBox.prototype, "messages", {
        set: function (args) {
            this._messages = args;
            this.renderMessage();
        },
        enumerable: true,
        configurable: true
    });
    ChatMessageBox.prototype.refresh = function () {
        this.editor = new ChatEditor(this.find('.dialog-message-text'), this);
        this.renderTitle();
    };
    /**
     * bindEvent
     */
    ChatMessageBox.prototype.bindEvent = function () {
        var _this = this;
        this.box.on('click', '.fa-smile-o', function () {
            _this.editor.insertHtmlAtCaret('<img src="./image/avatar.jpg" alt="">');
        }).on('click', '.dailog-message-action button', function () {
            _this.parent.trigger(EVENT_SEND_MESSAGE, _this.editor.text(), _this.revice.user, _this);
        });
        $(window).resize(function () {
            if (!_this.parent.isFixed()) {
                _this.box.removeAttr('style');
                return;
            }
            _this.box.toggleClass('dialog-min', $(window).width() < 500);
            _this.center();
        });
    };
    ChatMessageBox.prototype.renderTitle = function () {
        if (!this.revice) {
            return;
        }
        this.find('.dialog-title').html('与 ' + this.revice.name + ' 聊天中');
    };
    ChatMessageBox.prototype.addMessage = function (message) {
        this._messages.push(message);
        this.renderMessage();
    };
    /**
     * appendMessage
     */
    ChatMessageBox.prototype.appendMessage = function (messages) {
        this._messages = this._messages.concat(messages);
        this.renderMessage();
    };
    ChatMessageBox.prototype.prependMessage = function (messages) {
        this._messages = messages.concat(this._messages);
        this.renderMessage();
    };
    ChatMessageBox.prototype.renderMessage = function () {
        var _this_1 = this;
        var html = '', messages = this.cleanMessage();
        messages.forEach(function (item) {
            html += _this_1.renderMessageItem(item);
        });
        this.find('.dialog-message-box').html(html);
    };
    ChatMessageBox.prototype.renderMessageItem = function (item) {
        switch (item.type) {
            case ChatType.MORE:
                return '<p class="message-more">加载更多</p>';
            case ChatType.TIME:
                return '<p class="message-line">' + item.content + '</p>';
            case ChatType.TIP:
                return '<p class="message-tip">' + item.content + '</p>';
            case ChatType.MESSAGE:
            default:
                break;
        }
        if (item.user.id == this.send.id) {
            return ChatMessageBox.format("<div class=\"message-right\">\n            <img class=\"avatar\" src=\"{0}\">\n            <div class=\"content\">\n                {1}\n            </div>\n        </div>", item.user.avatar, item.content);
        }
        return ChatMessageBox.format("<div class=\"message-left\">\n        <img class=\"avatar\" src=\"{0}\">\n        <div class=\"content\">\n            {1}\n        </div>\n    </div>", item.user.avatar, item.content);
    };
    ChatMessageBox.prototype.cleanMessage = function () {
        if (!this._messages || this._messages.length < 1) {
            return [];
        }
        var messages = [
            {
                type: ChatType.MORE
            }
        ], lastTime = 0;
        this._messages.forEach(function (item) {
            if (item.time - lastTime > 200) {
                lastTime = item.time;
                messages.push({
                    content: ChatMessageBox.date(lastTime) + '',
                    type: ChatType.TIME
                });
            }
            messages.push(item);
        });
        return messages;
    };
    /**
     * showWithUser
     */
    ChatMessageBox.prototype.showWithUser = function (user) {
        this.revice = user;
        this.renderTitle();
        if (this.parent.isFixed()) {
            this.center();
        }
        this.show();
        this.messages = [];
        this.parent.trigger(EVENT_GET_MESSAGE, user.user, 1, 10, this);
    };
    ChatMessageBox.date = function (date, fmt) {
        if (fmt === void 0) { fmt = 'y年m月d日'; }
        if (typeof date == 'number') {
            date = new Date(date * 1000);
        }
        var o = {
            "y+": date.getFullYear(),
            "m+": date.getMonth() + 1,
            "d+": date.getDate(),
            "h+": date.getHours(),
            "i+": date.getMinutes(),
            "s+": date.getSeconds(),
            "q+": Math.floor((date.getMonth() + 3) / 3),
            "S": date.getMilliseconds() //毫秒 
        };
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(fmt)) {
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            }
        }
        return fmt;
    };
    return ChatMessageBox;
}(ChatBaseBox));
/**
 * 会员列表
 */
var ChatUserBox = /** @class */ (function (_super) {
    __extends(ChatUserBox, _super);
    /**
     *
     */
    function ChatUserBox(parent) {
        var _this_1 = _super.call(this) || this;
        _this_1.parent = parent;
        _this_1._last_friends = [];
        _this_1._friends = [];
        _this_1.box = _this_1.parent.append(HTML_MAIN);
        _this_1.menu = new ChatMenu(_this_1.find('.dialog-menu'), USER_MENU);
        _this_1.bindEvent();
        return _this_1;
    }
    Object.defineProperty(ChatUserBox.prototype, "user", {
        get: function () {
            return this._user;
        },
        set: function (v) {
            this._user = v;
            this.renderUser();
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChatUserBox.prototype, "friends", {
        set: function (args) {
            var _this_1 = this;
            this._friends = args;
            this.renderFriends();
            args.forEach(function (group) {
                group.users.forEach(function (user) {
                    if (user.last_message) {
                        _this_1._last_friends.push(user);
                    }
                });
            });
            this.renderLastFriends();
            this.refreshMenu();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChatUserBox.prototype, "groups", {
        set: function (args) {
            this._groups = args;
            this.renderGroup();
            // args.forEach(user => {
            //     if (user.last_message) {
            //         this._last_friends.push(user);
            //     }
            // });
            this.renderLastFriends();
        },
        enumerable: true,
        configurable: true
    });
    ChatUserBox.prototype.refresh = function () {
        this.parent.trigger(EVENT_REFRESH_USERS, this);
        this.parent.trigger(EVENT_REFRESH_GROUPS, this);
    };
    ChatUserBox.prototype.renderGroup = function () {
        var tpl = "<div class=\"dialog-user\">\n        <div class=\"dialog-user-avatar\">\n            <img src=\"{0}\" alt=\"\">\n        </div>\n        <div class=\"dialog-user-info\">\n            <p>\n                <span class=\"name\">{1}</span>\n            </p>\n            <p>\n                <span class=\"content\">{2}</span>\n            </p>\n        </div>\n    </div>", html = '';
        this._groups.forEach(function (group) {
            html += ChatUserBox.format(tpl, group.cover, group.name, group.brief);
        });
        this.find('.dialog-tab-box .dialog-tab-item').eq(2).html(html);
    };
    ChatUserBox.prototype.renderFriends = function () {
        var panel = "\n        <div class=\"dialog-panel expanded\">\n        <div class=\"dialog-panel-header\">\n            <i class=\"dialog-panel-icon\"></i>\n            <span>{0} ({1} / {2})</span>\n        </div>\n        <div class=\"dialog-panel-box\">\n            {3}\n        </div>\n    </div>\n        ", tpl = "<div class=\"dialog-user\" data-id=\"{3}\">\n            <div class=\"dialog-user-avatar\">\n                <img src=\"{0}\" alt=\"\">\n            </div>\n            <div class=\"dialog-user-info\">\n                <p>\n                    <span class=\"name\">{1}</span>\n                </p>\n                <p>\n                    <span class=\"content\">{2}</span>\n                </p>\n            </div>\n        </div>", html = '';
        this._friends.forEach(function (group) {
            var groupHtml = '';
            group.users.forEach(function (user) {
                groupHtml += ChatUserBox.format(tpl, user.user.avatar, user.name, user.user.brief || '', user.id);
            });
            html += ChatUserBox.format(panel, group.name, group.online_count, group.count, groupHtml);
        });
        this.find('.dialog-tab-box .dialog-tab-item').eq(1).html(html);
    };
    ChatUserBox.prototype.renderLastFriends = function () {
        var _this_1 = this;
        var tpl = "<div class=\"dialog-user\" data-id=\"{5}\">\n        <div class=\"dialog-user-avatar\">\n            <img src=\"{0}\" alt=\"\">\n        </div>\n        <div class=\"dialog-user-info\">\n            <p>\n                <span class=\"name\">{1}</span>\n                <span class=\"time\">{2}</span>\n            </p>\n            <p>\n                <span class=\"content\">{3}</span>\n                <span class=\"count\">{4}</span>\n            </p>\n        </div>\n    </div>", html = '';
        this._user.new_count = 0;
        this._last_friends.forEach(function (user) {
            var count = user.new_count || 0;
            _this_1._user.new_count += count;
            html += ChatUserBox.format(tpl, user.user.avatar, user.name, ChatMessageBox.date(user.last_message.time), user.last_message.content, count, user.id);
        });
        this.find('.dialog-tab-box .dialog-tab-item').eq(0).html(html);
        this.renderUser();
    };
    ChatUserBox.prototype.renderUser = function () {
        var tpl = "<div class=\"dialog-info-avatar\">\n        <img src=\"{0}\" alt=\"\">\n    </div>\n    <div class=\"dialog-info-name\">\n        <h3>{1}</h3>\n        <p>{2}</p>\n    </div>\n    <div class=\"dialog-message-count\">\n    {3}\n    </div>";
        this.find('.dialog-info').html(ChatUserBox.format(tpl, this._user.avatar, this._user.name, this._user.brief, this._user.new_count));
    };
    ChatUserBox.prototype.bindEvent = function () {
        var _this = this;
        $(document).click(function () {
            _this.menu && _this.menu.hide();
        });
        this.box.click(function () {
            if ($(this).hasClass('dialog-min')) {
                $(this).removeClass('dialog-min');
            }
        }).on('click', '.dialog-header .fa-minus', function (e) {
            e.stopPropagation();
            _this.box.addClass('dialog-min');
        }).on('click', '.dialog-header .fa-plus', function () {
            _this.parent.searchBox.showCenter();
        }).on('click', '.dialog-tab .dialog-tab-header .dialog-tab-item', function () {
            var $this = $(this);
            $this.addClass('active').siblings().removeClass('active');
            $this.closest('.dialog-tab').find('.dialog-tab-box .dialog-tab-item').eq($this.index()).addClass('active').siblings().removeClass('active');
        }).on('click', '.dialog-panel .dialog-panel-header', function () {
            $(this).closest('.dialog-panel').toggleClass('expanded');
        }).on('click', '.dialog-tab .dialog-user', function () {
            var id = $(this).data('id');
            if (!id) {
                return;
            }
            _this.parent.chatBox.showWithUser(_this.getUser(id));
        }).on('contextmenu', '.dialog-tab .dialog-user', function (event) {
            _this.menu && _this.menu.showPosition(event.clientX, event.clientY, $(this));
            return false;
        });
        this.menu.on('click', function (menuLi, menu, userItem) {
            if (menu.name == 'view') {
                _this.parent.userBox.showWithUser(_this.getUser(userItem.data('id')));
            }
        });
        this.parent.on(EVENT_USER_GROUPS, function (box) {
            box.groups = _this._friends;
        });
    };
    ChatUserBox.prototype.refreshMenu = function () {
        var menus = [];
        this._friends.forEach(function (item) {
            menus.push({
                name: 'group-' + item.id,
                text: item.name
            });
        });
        this.menu.setChildrenMenu('move', menus);
    };
    ChatUserBox.prototype.getUser = function (id) {
        for (var _i = 0, _a = this._last_friends; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.id == id) {
                return item;
            }
        }
        for (var _b = 0, _c = this._friends; _b < _c.length; _b++) {
            var group = _c[_b];
            for (var _d = 0, _e = group.users; _d < _e.length; _d++) {
                var item = _e[_d];
                if (item.id == id) {
                    return item;
                }
            }
        }
    };
    return ChatUserBox;
}(ChatBaseBox));
var ChatRoom = /** @class */ (function () {
    function ChatRoom(target) {
        this.target = target;
        this._events = {};
        if (this.target && this.target.length > 0) {
            return;
        }
        this.target = $('<div class="dialog-chat dialog-fixed"></div>');
        $(document.body).append(this.target);
    }
    ChatRoom.prototype.on = function (event, callback) {
        this._events[event] = callback;
        return this;
    };
    ChatRoom.prototype.hasEvent = function (event) {
        return this._events.hasOwnProperty(event);
    };
    ChatRoom.prototype.trigger = function (event) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!this.hasEvent(event)) {
            return;
        }
        return (_a = this._events[event]).call.apply(_a, __spreadArrays([this], args));
    };
    ChatRoom.prototype.init = function (user) {
        this.mainBox = new ChatUserBox(this);
        this.addBox = new ChatAddUserBox(this);
        this.applyBox = new ChatApplyBox(this);
        this.userBox = new ChatUserInfoBox(this);
        this.applyLogBox = new ChatApplyLogBox(this);
        this.searchBox = new ChatSearchBox(this);
        this.chatBox = new ChatMessageBox(this, user);
        this.mainBox.user = user;
    };
    /**
     * find
     */
    ChatRoom.prototype.find = function (tag) {
        return this.target.find(tag);
    };
    /**
     * append
     */
    ChatRoom.prototype.append = function (html) {
        var box = $(html);
        this.target.append(box);
        return box;
    };
    /**
     * isFixed
     */
    ChatRoom.prototype.isFixed = function () {
        return this.target.hasClass('dialog-fixed');
    };
    /**
     * toggleMode
     */
    ChatRoom.prototype.toggleMode = function () {
        if (this.isFixed()) {
            return this.page();
        }
        return this.fixed();
    };
    /**
     * fixed
     */
    ChatRoom.prototype.fixed = function () {
        this.target.addClass('dialog-fixed').removeClass('dialog-chat-page');
        this.chatBox.center();
        return this;
    };
    /**
     * page
     */
    ChatRoom.prototype.page = function () {
        this.target.removeClass('dialog-fixed').addClass('dialog-chat-page');
        this.chatBox.box.removeAttr('style');
        return this;
    };
    return ChatRoom;
}());
var USER_MENU = [
    {
        name: 'view',
        icon: 'eye',
        text: '查看资料'
    },
    {
        name: 'move',
        icon: 'bookmark',
        text: '移动好友',
    },
    {
        name: 'remove',
        icon: 'trash',
        text: '删除好友'
    },
];
function registerChat() {
    var room = new ChatRoom($('.dialog-chat'));
    room.on(EVENT_REFRESH_USERS, function (box) {
        postJson(BASE_URI + 'friend', function (data) {
            if (data.code != 200) {
                return;
            }
            box.friends = data.data;
        });
    }).on(EVENT_REFRESH_GROUPS, function (box) {
        postJson(BASE_URI + 'group', function (data) {
            if (data.code != 200) {
                return;
            }
            box.groups = data.data;
        });
    }).on(EVENT_SEARCH_USERS, function (keywords, box) {
        postJson(BASE_URI + 'friend/search', {
            keywords: keywords
        }, function (data) {
            if (data.code != 200) {
                return;
            }
            box.users = data.data.data;
        });
    }).on(EVENT_GET_MESSAGE, function (user, page, per_page, box) {
        postJson(BASE_URI + 'friend/message', {
            user: user.id,
            page: page,
            per_page: per_page,
        }, function (data) {
            if (data.code != 200) {
                return;
            }
            box.messages = data.data.data;
        });
    }).on(EVENT_SEND_MESSAGE, function (content, user, box) {
        postJson(BASE_URI + 'friend/send_message', {
            user: user.id,
            content: content
        }, function (data) {
            if (data.code != 200) {
                return;
            }
            box.addMessage({
                content: content,
                type: ChatType.MESSAGE,
                user: room.mainBox.user
            }); //data.data.data;
            box.editor.clear();
        });
    }).on(EVENT_APPLY_USER, function (user, group, remark, box) {
        postJson(BASE_URI + 'friend/apply', {
            user: user.id,
            group: group,
            remark: remark
        }, function (data) {
            if (data.code != 200) {
                return;
            }
            box.hide();
        });
    }).on(EVENT_ADD_USER, function (user, group, box) {
        postJson(BASE_URI + 'friend/agree', {
            user: user.id,
            name: user.name,
            group: group
        }, function (data) {
            if (data.code != 200) {
                return;
            }
            box.hide();
        });
    }).on(EVENT_APPLY_USERS, function (box) {
        postJson(BASE_URI + 'friend/apply_log', function (data) {
            if (data.code != 200) {
                return;
            }
            box.users = data.data;
        });
    });
    postJson(BASE_URI + 'user', function (data) {
        if (data.code === 200) {
            room.init(data.data);
            loopPing();
        }
    });
    room.target.on('click', '.dialog-header .fa-close', function () {
        $(this).closest('.dialog-box').hide();
    });
    $('#toggle-btn').click(function () {
        room.toggleMode();
    });
    var handle;
    var lastTime;
    var loopPing = function () {
        postJson(BASE_URI + 'message/ping', {
            time: lastTime || 0,
            user: room.chatBox.revice ? room.chatBox.revice.id : 0
        }, function (data) {
            if (data.code === 200) {
                var args = data.data;
                doEvent('message_count', args.message);
                if (args.apply > 0) {
                    doEvent('apply');
                }
                if (args.messages && args.messages.length > 0) {
                    doEvent('message', args.messages);
                }
                lastTime = data.data.time;
            }
            handle = setTimeout(loopPing, 10000);
        });
    }, doEvent = function (event, data) {
        if (event === 'message_count') {
            room.mainBox.user.new_count = data;
            return;
        }
        if (event === 'apply') {
            room.applyLogBox.showWithRefresh();
            return;
        }
        if (event === 'message') {
            room.chatBox.appendMessage(data);
            return;
        }
    };
}
function registerWsChat(baseUri) {
    var room = new ChatRoom($('.dialog-chat'));
    var socket = new Ws(baseUri);
    socket.OnConnect(function () {
    });
    socket.OnDisconnect(function () {
    });
    socket.On('message', function () {
    });
    room.on(EVENT_REFRESH_USERS, function (box) {
        socket.Emit(EVENT_REFRESH_USERS, true);
    }).on(EVENT_REFRESH_GROUPS, function (box) {
        socket.Emit(EVENT_REFRESH_GROUPS, true);
    }).on(EVENT_SEARCH_USERS, function (keywords, box) {
        socket.Emit(EVENT_SEARCH_USERS, keywords);
    }).on(EVENT_GET_MESSAGE, function (user, page, per_page, box) {
        socket.Emit(EVENT_GET_MESSAGE, { page: page, per_page: per_page, user: user.id });
    }).on(EVENT_SEND_MESSAGE, function (content, user, box) {
        socket.Emit(EVENT_SEND_MESSAGE, { content: content, user: user.id });
    }).on(EVENT_APPLY_USER, function (user, group, remark, box) {
        postJson(BASE_URI + 'friend/apply', {
            user: user.id,
            group: group,
            remark: remark
        }, function (data) {
            if (data.code != 200) {
                return;
            }
            box.hide();
        });
    }).on(EVENT_ADD_USER, function (user, group, box) {
        postJson(BASE_URI + 'friend/agree', {
            user: user.id,
            group: group
        }, function (data) {
            if (data.code != 200) {
                return;
            }
            box.hide();
        });
    });
    $('.dialog-box').on('click', '.dialog-header .fa-close', function () {
        $(this).closest('.dialog-box').hide();
    });
    $('#toggle-btn').click(function () {
        room.toggleMode();
    });
}
