var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
;
(function ($) {
    var EVENT_TIME_UPDATE = 'timeupdate';
    var EVENT_PLAY = 'play';
    var EVENT_PAUSE = 'pause';
    var EVENT_ENDED = 'ended';
    var EVENT_VOLUME_UPDATE = 'volumeupdate';
    var EVENT_TAP_PLAY = 'tap_play';
    var EVENT_TAP_PAUSE = 'tap_pause';
    var EVENT_BOOT = 'boot';
    var EVENT_TAP_VOLUME = 'tap_volume';
    var EVENT_TAP_TIME = 'tap_time';
    var EVENT_ENTER_FULL_SCREEN = 'full_screen';
    var EVENT_EXIT_FULL_SCREEN = 'exit_full_screen';
    var screenFull = function () {
        var fnMap = [
            [
                'requestFullscreen',
                'exitFullscreen',
                'fullscreenElement',
                'fullscreenEnabled',
                'fullscreenchange',
                'fullscreenerror'
            ],
            // New WebKit
            [
                'webkitRequestFullscreen',
                'webkitExitFullscreen',
                'webkitFullscreenElement',
                'webkitFullscreenEnabled',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            // Old WebKit
            [
                'webkitRequestFullScreen',
                'webkitCancelFullScreen',
                'webkitCurrentFullScreenElement',
                'webkitCancelFullScreen',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            [
                'mozRequestFullScreen',
                'mozCancelFullScreen',
                'mozFullScreenElement',
                'mozFullScreenEnabled',
                'mozfullscreenchange',
                'mozfullscreenerror'
            ],
            [
                'msRequestFullscreen',
                'msExitFullscreen',
                'msFullscreenElement',
                'msFullscreenEnabled',
                'MSFullscreenChange',
                'MSFullscreenError'
            ]
        ];
        for (var _i = 0, fnMap_1 = fnMap; _i < fnMap_1.length; _i++) {
            var item = fnMap_1[_i];
            if (item && item[1] in document) {
                return item;
            }
        }
        return false;
    }();
    var MediaPlayer = /** @class */ (function () {
        function MediaPlayer(element, options) {
            this.element = element;
            this.options = options;
            this.booted = false;
            this.volumeLast = 100;
            this.duration = 0;
            if (this.element.data('booted')) {
                return;
            }
            this.element.data('booted', true);
            this.bindCustomEvent();
            if (this.hasExist()) {
                this.initExist();
                return;
            }
            this.init();
        }
        MediaPlayer.prototype.on = function (event, callback) {
            this.options['on' + event] = callback;
            return this;
        };
        MediaPlayer.prototype.hasEvent = function (event) {
            return this.options.hasOwnProperty('on' + event);
        };
        MediaPlayer.prototype.trigger = function (event) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var realEvent = 'on' + event;
            if (!this.hasEvent(event)) {
                return;
            }
            return (_a = this.options[realEvent]).call.apply(_a, __spreadArray([this], args, false));
        };
        MediaPlayer.prototype.bindCustomEvent = function () {
            var _this = this;
            this.on(EVENT_BOOT, function () {
                if (_this.booted) {
                    return;
                }
                if (_this.options.type === 'audio') {
                    _this.bindAudioEvent();
                    return;
                }
                if (_this.options.type === 'iframe') {
                    _this.videoFrame();
                    _this.booted = true;
                    return;
                }
                _this.videoPlayer();
                _this.initBar(_this.element.find('.player-bar'));
                _this.bindVideoEvent();
            }).on(EVENT_TAP_PLAY, function () {
                _this.playerElement.play();
            }).on(EVENT_TAP_PAUSE, function () {
                _this.playerElement.pause();
            }).on(EVENT_TIME_UPDATE, function (p, t) {
                _this.duration = t;
                _this.playerBar.find('.time').text(_this.formatMinute(p) + '/' + _this.formatMinute(t));
                var progess = _this.playerBar.find('.slider .progress');
                progess.attr('title', parseInt(p.toString()));
                progess.find('.progress-bar').css('width', p * 100 / t + '%');
            }).on(EVENT_PLAY, function () {
                _this.playerBar.find('.icon .fa').addClass('fa-pause').removeClass('fa-play');
            }).on(EVENT_PAUSE, function () {
                _this.playerBar.find('.icon .fa').removeClass('fa-pause').addClass('fa-play');
            }).on(EVENT_ENDED, function () {
                _this.trigger(EVENT_PAUSE);
            }).on(EVENT_TAP_VOLUME, function (v) {
                if (!_this.playerElement) {
                    return;
                }
                _this.playerElement.volume = v / 100;
                _this.trigger(EVENT_VOLUME_UPDATE, v);
            }).on(EVENT_VOLUME_UPDATE, function (v) {
                var progess = _this.playerBar.find('.volume-slider .progress');
                progess.attr('title', parseInt(v.toString()));
                progess.find('.progress-bar').css('width', v + '%');
                var volumeCls = 'fa-volume-up';
                if (v <= 0) {
                    volumeCls = 'fa-volume-off';
                }
                else if (v < 60) {
                    volumeCls = 'fa-volume-down';
                }
                _this.playerBar.find('.volume-icon .fa').attr('class', 'fa ' + volumeCls);
            }).on(EVENT_TAP_TIME, function (p) {
                if (!_this.playerElement) {
                    return;
                }
                _this.playerElement.currentTime = p;
            }).on(EVENT_EXIT_FULL_SCREEN, function () {
                _this.playerBar.find('.full-icon .fa').attr('class', 'fa fa-expand');
                _this.element.removeClass('player-full');
            }).on(EVENT_ENTER_FULL_SCREEN, function () {
                _this.element.addClass('player-full');
                _this.playerBar.find('.full-icon .fa').attr('class', 'fa fa-compress');
            });
        };
        MediaPlayer.prototype.hasExist = function () {
            if (!this.options.src) {
                return true;
            }
            return this.element.has('iframe,video,audio').length;
        };
        /**
         * 直接使用默认的
         * @returns
         */
        MediaPlayer.prototype.initExist = function () {
            var video = this.element.find('video');
            if (video.length > 0) {
                this.initVideoExist(video);
                return;
            }
            var audio = this.element.find('audio');
            if (audio.length > 0) {
                this.initAudioExist(audio);
                return;
            }
            this.element.addClass('video-player');
        };
        MediaPlayer.prototype.initAudioExist = function (audio) {
            this.element.addClass('audio-player');
            this.options.type = 'audio';
            if (!this.options.src) {
                this.options.src = audio.attr('src');
            }
            audio.removeAttr('controls');
            this.playerElement = audio[0];
            this.element.append(this.playerBarHtml());
            this.initBar(this.element);
            this.bindAudioEvent();
        };
        MediaPlayer.prototype.initVideoExist = function (video) {
            this.element.addClass('video-player');
            this.options.type = 'video';
            if (!this.options.src) {
                this.options.src = video.attr('src');
            }
            video.removeAttr('controls').addClass('player-video');
            this.playerElement = video[0];
            var bar = this.element.find('.player-bar');
            if (bar.length < 1) {
                bar = $(this.playerBarHtml());
                video.after(bar);
            }
            this.initBar(bar);
            this.bindVideoEvent();
        };
        MediaPlayer.prototype.init = function () {
            if (this.options.type === 'audio') {
                this.initAudio();
                return;
            }
            this.initVideo();
        };
        MediaPlayer.prototype.initAudio = function () {
            this.audioPlayer();
            this.initBar(this.element);
        };
        MediaPlayer.prototype.initBar = function (bar) {
            this.playerBar = bar;
            var that = this;
            bar.on('click', '.icon .fa', function () {
                if (!that.booted) {
                    that.trigger(EVENT_BOOT);
                }
                that.trigger($(this).hasClass('fa-play') ? EVENT_TAP_PLAY : EVENT_TAP_PAUSE);
            }).on('click', '.volume-icon .fa', function () {
                var $this = $(this);
                if ($this.hasClass('fa-volume-mute') || $this.hasClass('fa-volume-off')) {
                    that.trigger(EVENT_TAP_VOLUME, that.volumeLast);
                    return;
                }
                if (that.playerElement) {
                    that.volumeLast = that.playerElement.volume * 100;
                }
                that.trigger(EVENT_TAP_VOLUME, 0);
            }).on('click', '.slider .progress', function (event) {
                var $this = $(this);
                that.trigger(EVENT_TAP_TIME, (event.clientX - $this.offset().left) * that.duration / $this.width());
            }).on('click', '.volume-slider .progress', function (event) {
                var $this = $(this);
                that.trigger(EVENT_TAP_VOLUME, (event.clientX - $this.offset().left) * 100 / $this.width());
            }).on('click', '.full-icon .fa', function () {
                if (that.element.hasClass('player-full')) {
                    that.exitFullscreen();
                    return;
                }
                that.fullScreen();
            });
        };
        MediaPlayer.prototype.initVideo = function () {
            var _this = this;
            this.videoMask();
            this.element.on('click', '.player-mask', function () {
                _this.trigger(EVENT_BOOT);
                if (_this.playerElement) {
                    _this.trigger(EVENT_TAP_PLAY);
                }
            });
        };
        MediaPlayer.prototype.bindAudioEvent = function () {
            var _this = this;
            if (this.booted) {
                return;
            }
            this.booted = true;
            if (!this.playerElement) {
                this.playerElement = document.createElement('audio');
            }
            if (this.options.src) {
                this.playerElement.src = this.options.src;
            }
            this.playerElement.addEventListener('timeupdate', function () {
                if (isNaN(_this.playerElement.duration) || !isFinite(_this.playerElement.duration) || _this.playerElement.duration <= 0) {
                    _this.trigger(EVENT_TIME_UPDATE, 0, 0);
                    return;
                }
                _this.trigger(EVENT_TIME_UPDATE, _this.playerElement.currentTime, _this.playerElement.duration);
            });
            this.playerElement.addEventListener('ended', function () {
                _this.trigger(EVENT_ENDED);
            });
            this.playerElement.addEventListener('pause', function () {
                _this.trigger(EVENT_PAUSE);
            });
            this.playerElement.addEventListener('play', function () {
                _this.trigger(EVENT_PLAY);
            });
            this.trigger(EVENT_VOLUME_UPDATE, this.playerElement.volume * 100);
        };
        MediaPlayer.prototype.bindVideoEvent = function () {
            var _this = this;
            if (this.booted) {
                return;
            }
            this.booted = true;
            if (!this.playerElement) {
                this.playerElement = this.element.find('.player-video')[0];
            }
            this.playerElement.addEventListener('timeupdate', function () {
                if (isNaN(_this.playerElement.duration) || !isFinite(_this.playerElement.duration) || _this.playerElement.duration <= 0) {
                    _this.trigger(EVENT_TIME_UPDATE, 0, 0);
                    return;
                }
                _this.trigger(EVENT_TIME_UPDATE, _this.playerElement.currentTime, _this.playerElement.duration);
            });
            this.playerElement.addEventListener('ended', function () {
                _this.trigger(EVENT_ENDED);
            });
            this.playerElement.addEventListener('pause', function () {
                _this.trigger(EVENT_PAUSE);
            });
            this.playerElement.addEventListener('play', function () {
                _this.trigger(EVENT_PLAY);
            });
            this.trigger(EVENT_VOLUME_UPDATE, this.playerElement.volume * 100);
            if (screenFull) {
                document.addEventListener(screenFull[4], function () {
                    if (_this.checkFull()) {
                        _this.trigger(EVENT_ENTER_FULL_SCREEN);
                        return;
                    }
                    _this.trigger(EVENT_EXIT_FULL_SCREEN);
                });
            }
        };
        MediaPlayer.prototype.audioPlayer = function () {
            this.element.addClass('audio-player');
            this.element.html(this.playerBarHtml());
        };
        MediaPlayer.prototype.videoMask = function () {
            this.element.addClass('video-player');
            this.element.html("<div class=\"player-mask\" title=\"\u6B64\u5904\u6709\u89C6\u9891\uFF0C\u70B9\u51FB\u5373\u53EF\u64AD\u653E\">\n            <i class=\"fa fa-play\"></i>\n        </div>");
        };
        MediaPlayer.prototype.videoFrame = function () {
            this.element.html("\n            <iframe class=\"player-frame\" src=\"".concat(this.options.src, "\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>"));
        };
        MediaPlayer.prototype.videoPlayer = function () {
            this.element.html("<video class=\"player-video\" src=\"".concat(this.options.src, "\"></video>").concat(this.playerBarHtml()));
        };
        MediaPlayer.prototype.playerBarHtml = function () {
            if (this.options.type === 'iframe') {
                return '';
            }
            var html = "<div class=\"icon\" title=\"\u64AD\u653E\">\n            <i class=\"fa fa-play\"></i>\n        </div>\n        <div class=\"slider\">\n            <div class=\"progress\" title=\"0\">\n                <div class=\"progress-bar\"></div>\n            </div>\n        </div>\n        <div class=\"time\">\n            00:00/00:00\n        </div>\n        <div class=\"volume-icon\">\n            <i class=\"fa fa-volume-up\"></i>\n        </div>\n        <div class=\"volume-slider\">\n            <div class=\"progress\" title=\"100\">\n                <div class=\"progress-bar\" style=\"width: 100%;\"></div>\n            </div>\n        </div>";
            if (this.options.type === 'audio') {
                return html;
            }
            return "<div class=\"player-bar\">".concat(html, "<div class=\"full-icon\">\n            <i class=\"fa fa-expand\"></i>\n        </div></div>");
        };
        MediaPlayer.prototype.formatMinute = function (time) {
            return this.twoPad(Math.floor(time / 60)) + ':' + this.twoPad(Math.floor(time % 60));
        };
        MediaPlayer.prototype.twoPad = function (n) {
            var str = n.toString();
            return str[1] ? str : '0' + str;
        };
        MediaPlayer.prototype.fullScreen = function (element) {
            if (element === void 0) { element = document.documentElement; }
            if (!screenFull) {
                return;
            }
            element[screenFull[0]]();
        };
        MediaPlayer.prototype.exitFullscreen = function (element) {
            if (element === void 0) { element = document; }
            if (!screenFull) {
                return;
            }
            element[screenFull[1]]();
        };
        MediaPlayer.prototype.checkFull = function () {
            return screenFull && Boolean(document[screenFull[2]]);
        };
        return MediaPlayer;
    }());
    $.fn.player = function (option) {
        if (this.length < 2) {
            return new MediaPlayer(this, option);
        }
        this.each(function () {
            var $this = $(this);
            new MediaPlayer($this, $.extend({}, $this.data(), option));
        });
    };
})(jQuery);
