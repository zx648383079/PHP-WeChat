var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
function bindPage(pageId) {
    var editor = new VisualEditor($('#page-box'));
    var postCallback = function (data, success, failure) {
        if (data.code == 200) {
            success && success(data.data);
            return;
        }
        if (failure) {
            failure(data.message);
        }
        Dialog.tip(data.message);
    };
    editor.on(EditorEventGetWeights, function (success, failure) {
        $.getJSON(BASE_URI + 'weight?id=' + pageId, function (data) {
            postCallback(data, success, failure);
        });
    }).on(EditorEventGetPage, function (success, failure) {
        $.getJSON(BASE_URI + 'page/detail?id=' + pageId, function (data) {
            postCallback(data, success, failure);
        });
    }).on(EditorEventGetWeightProperty, function (weightId, success, failure) {
        $.getJSON(BASE_URI + 'weight/setting?id=' + weightId, function (data) {
            postCallback(data, success, failure);
        });
    }).on(EditorEventWeightForm, function (weightId, success, failure) {
        $.getJSON(BASE_URI + 'weight/form?id=' + weightId, function (data) {
            postCallback(data, success, failure);
        });
    }).on(EditorEventSaveWeightProperty, function (weightId, data, success, failure) {
        postJson(BASE_URI + 'weight/save', typeof data !== 'object' ? data : __assign({ id: weightId }, data), function (res) {
            postCallback(res, success, failure);
        });
    }).on(EditorEventRefreshWeight, function (weightId, success, failure) {
        $.getJSON(BASE_URI + 'weight/refresh?id=' + weightId, function (data) {
            postCallback(data, success, failure);
        });
    }).on(EditorEventAddWeight, function (data, success, failure) {
        postJson(BASE_URI + 'weight/create', __assign({ page_id: pageId }, data), function (res) {
            postCallback(res, success, failure);
        });
    }).on(EditorEventMoveWeight, function (data, success, failure) {
        postJson(BASE_URI + 'weight/move', __assign({ page_id: pageId }, data), function (res) {
            postCallback(res, success, failure);
        });
    }).on(EditorEventRemoveWeight, function (weightId, success, failure) {
        postJson(BASE_URI + 'weight/destroy', {
            id: weightId
        }, function (res) {
            postCallback(res, success, failure);
        });
    }).on(EditorEventSavePage, function (weights, success, failure) {
        postJson(BASE_URI + 'weight/batch_save', {
            id: pageId,
            weights: weights
        }, function (res) {
            postCallback(res, function (data) {
                success && success(data);
                Dialog.tip('保存成功！');
            }, failure);
        });
    });
    editor.run();
    $('body').addClass('full-edit-mode');
    $(".mobile-size li").on('click', function () {
        var $this = $(this);
        $this.addClass("active").siblings().removeClass("active");
        $this.closest(".mobile-size").parent().removeClass("open");
        var size = $this.attr("data-size").split("*");
        if (size.length < 2 || !size[0] || !size[1]) {
            editor.normal();
            return;
        }
        editor.mobile(parseInt(size[0]), parseInt(size[1]));
    });
    $(".navbar>li>div").on('click', function () {
        $(this).parent().toggleClass("open");
    });
    $(".mobile-rotate").on('click', function () {
        editor.rotate();
    });
    $(".expand>.head").on('click', function () {
        $(this).parent().toggleClass("open");
    });
    if ($(window).width() > 769) {
        $('.sidebar-container-toggle').trigger('click');
    }
}
function bindEdit() {
    $('.theme-select').on('click', '.theme-item', function () {
        $(this).addClass('active').siblings().removeClass('active');
        $('input[name=theme_id]').val($(this).data('id'));
    });
}
var SearchDailog = /** @class */ (function () {
    function SearchDailog(element) {
        var _this = this;
        this.selected = [];
        this._selected = [];
        this.dialog = $(element).dialog({});
        $.get(this.dialog.box.data('url'), {
            selected: this.selected.join(',')
        }, function (html) {
            _this.html(html);
        });
        this.bindEvent();
    }
    SearchDailog.prototype.bindEvent = function () {
        var _this = this;
        var that = this;
        this.on('submit', '.dialog-search form', function () {
            var $this = $(this);
            $.get($this.attr('action'), $this.serialize() + '&selected=' + that.selected.join(','), function (html) {
                that.html(html);
            });
            return false;
        }).on('click', '.dialog-body-box .item', function () {
            var $this = $(this).toggleClass('selected');
            var id = parseInt($this.data('id'), 10);
            that.toggleItem(id, $this.hasClass('selected'));
        }).on('click', '.dialog-pager a', function (e) {
            e.preventDefault();
            $.get($(this).attr('href'), function (html) {
                that.html(html);
            });
        });
        this.dialog.on('done', function () {
            _this.selected = __spreadArray([], _this._selected, true);
            _this.dialog.close();
            _this._doneCallback && _this._doneCallback.call(_this, _this.selected);
        });
    };
    /**
     */
    SearchDailog.prototype.toggleItem = function (id, has) {
        if (id < 1) {
            return;
        }
        var index = this._selected.indexOf(id);
        if (typeof has === 'undefined') {
            has = index < 0;
        }
        if (has) {
            if (index < 0) {
                this._selected.push(id);
            }
            return;
        }
        if (index >= 0) {
            this._selected = this._selected.splice(index, 1);
        }
    };
    /**
     * html
     */
    SearchDailog.prototype.html = function (html) {
        if (html.indexOf('dialog-body-box') > 0) {
            this.find('.dialog-body').html(html);
        }
        else {
            this.find('.dialog-body .dialog-body-box').html(html);
        }
        this.dialog.resize();
        return this;
    };
    SearchDailog.prototype.find = function (tag) {
        return this.dialog.find(tag);
    };
    SearchDailog.prototype.on = function (event, tag, cb) {
        if (event === 'done') {
            this._doneCallback = tag;
            return this;
        }
        this.dialog.box.on(event, tag, cb);
        return this;
    };
    /**
     * show
     */
    SearchDailog.prototype.show = function () {
        var _this = this;
        this._selected = __spreadArray([], this.selected, true);
        this.find('.dialog-body-box .item').each(function (_, item) {
            var $this = $(item);
            $this.toggleClass('selected', _this._selected.indexOf($this.data('id')) >= 0);
        });
        this.dialog.show();
    };
    return SearchDailog;
}());
function bindNewTheme() {
    var box = new SearchDailog('.theme-dialog');
    $('*[data-type="add"]').on('click', function () {
        box.show();
    });
    box.on('done', function (selected) {
    });
}
