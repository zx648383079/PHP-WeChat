var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var DEL_URI = 'weight/destroy', NEW_URI = 'weight/create', REFRESH_URI = 'weight/refresh', EDIT_URI = 'weight/save', EDIT_DAILOG_URI = 'weight/edit_dialog', SETTING_URI = 'weight/setting', SAVE_SETTING_URI = 'weight/save_setting', INFO_URI = 'weight/info';
var PropertyInput = /** @class */ (function () {
    function PropertyInput() {
    }
    PropertyInput.guid = function () {
        return PropertyInput._guid++;
    };
    PropertyInput.title = function (val) {
        if (val === void 0) { val = ''; }
        var id = 'title_' + PropertyInput.guid();
        return PropertyInput.input(id, '标题', PropertyInput.text(id, 'title', val));
    };
    PropertyInput.lazy = function (val) {
        var id = 'settings_lazy_' + PropertyInput.guid();
        return PropertyInput.input(id, '懒加载', PropertyInput.radio(id, 'settings[lazy]', ['关闭', '开启'], !val ? 0 : val));
    };
    PropertyInput.margin = function (vals) {
        if (vals === void 0) { vals = []; }
        return PropertyInput.sideInput('settings[style][margin]', '外边距', vals);
    };
    PropertyInput.padding = function (name, vals) {
        if (vals === void 0) { vals = []; }
        return PropertyInput.sideInput('settings[style][' + name + '][padding]', '内边距', vals);
    };
    PropertyInput.position = function (data) {
        var html = PropertyInput.positionSide(data === null || data === void 0 ? void 0 : data.type, data === null || data === void 0 ? void 0 : data.value);
        var option = PropertyInput.option({
            static: '无',
            relative: '相对定位',
            absolute: '绝对定位',
            fixed: '固定定位'
        }, data === null || data === void 0 ? void 0 : data.type);
        return PropertyInput.input('', '悬浮', "<select name=\"settings[style][position][type]\">".concat(option, "</select><div class=\"side-input\">").concat(html, "</div>"), 'position-input');
    };
    PropertyInput.positionSide = function (type, value) {
        return type && type != 'static' ? PropertyInput.side('settings[style][position][value]', 'settings[style][position][value]', value) : '';
    };
    PropertyInput.border = function (name, data) {
        name = 'settings[style]' + (name ? '[' + name + ']' : '') + '[border]';
        var id = PropertyInput.nameToId(name) + '_' + PropertyInput.guid();
        var html = PropertyInput.checkbox(id, name + '[side][]', ['上', '右', '下', '左'], data === null || data === void 0 ? void 0 : data.side);
        var option = PropertyInput.option(['实线', '虚线'], data && data.value && data.value[1] == 1 ? 1 : 0);
        return PropertyInput.input(id, '边框', "<input type=\"text\" class=\"form-control\" name=\"".concat(name, "[value][]\" value=\"").concat(data === null || data === void 0 ? void 0 : data.value[0], "\" placeholder=\"\u7C97\u7EC6\" size=\"4\"><select name=\"").concat(name, "[value][]\">").concat(option, "</select><input type=\"color\" name=\"").concat(name, "[value][]\" value=\"").concat(data === null || data === void 0 ? void 0 : data.value[2], "\"><div class=\"side-input\">").concat(html, "</div>\n        "));
    };
    PropertyInput.radius = function (name, data) {
        name = 'settings[style]' + (name ? '[' + name + ']' : '') + '[border-radius]';
        var id = PropertyInput.nameToId(name) + '_' + PropertyInput.guid();
        return PropertyInput.input(id, '圆角', "<input type=\"text\" id=\"".concat(id, "_0\" class=\"form-control \" name=\"").concat(name, "[]\" value=\"\" size=\"4\" placeholder=\"\u5DE6\u4E0A\">\n        <input type=\"text\" id=\"").concat(id, "_1\" class=\"form-control \" name=\"").concat(name, "[]\" value=\"\" size=\"4\" placeholder=\"\u53F3\u4E0A\">\n        <br/>\n        <input type=\"text\" id=\"").concat(id, "_2\" class=\"form-control \" name=\"").concat(name, "[]\" value=\"\" size=\"4\" placeholder=\"\u5DE6\u4E0B\">\n        <input type=\"text\" id=\"").concat(id, "_3\" class=\"form-control \" name=\"").concat(name, "[]\" value=\"\" size=\"4\" placeholder=\"\u53F3\u4E0B\">"));
    };
    PropertyInput.color = function (name, data) {
        name = 'settings[style]' + (name ? '[' + name + ']' : '') + '[color]';
        var id = PropertyInput.nameToId(name) + '_' + PropertyInput.guid();
        return PropertyInput.input(id, '字体颜色', PropertyInput.radio(id, name + '[type]', ['无', '有'], data === null || data === void 0 ? void 0 : data.type) + "<input type=\"color\" name=\"".concat(name, "[value]\" value=\"").concat(data === null || data === void 0 ? void 0 : data.value, "\">"));
    };
    PropertyInput.background = function (name, data) {
        name = 'settings[style]' + (name ? '[' + name + ']' : '') + '[background]';
        var id = PropertyInput.nameToId(name) + '_' + PropertyInput.guid();
        var html = PropertyInput.radio(id, name + '[type]', ['无', '颜色', '图片'], '0') + '<div class="value-input">' + PropertyInput.backgroundValue(name, data === null || data === void 0 ? void 0 : data.type) + '</div>';
        return PropertyInput.input(id, '背景', html, 'background-input');
    };
    PropertyInput.backgroundValue = function (name, type) {
        if (!type || type < 1) {
            return '';
        }
        if (type == 2) {
            return "<div class=\"file-input\">\n            <input type=\"text\" class=\"form-control \" name=\"".concat(name, "[value]\" value=\"\" size=\"10\">\n            <button type=\"button\" data-type=\"upload\">\u4E0A\u4F20</button>\n        </div>");
        }
        ;
        return "<input type=\"color\" name=\"".concat(name, "[value]\">");
    };
    PropertyInput.visibility = function (name, val) {
        name = 'settings[style][' + name + '][visibility]';
        var id = PropertyInput.nameToId(name) + '_' + PropertyInput.guid();
        return PropertyInput.input(id, '可见', PropertyInput.radio(id, name, ['显示', '隐藏'], val));
    };
    PropertyInput.fontSize = function (name, val) {
        name = 'settings[style][' + name + '][font-size]';
        var id = PropertyInput.nameToId(name) + '_' + PropertyInput.guid();
        return PropertyInput.input(id, '字体大小', PropertyInput.text(id, name, val, 4));
    };
    PropertyInput.textAlign = function (name, val) {
        name = 'settings[style][' + name + '][text-align]';
        var id = PropertyInput.nameToId(name) + '_' + PropertyInput.guid();
        return PropertyInput.input(id, '字体位置', PropertyInput.radio(id, name, ['居左', '居中', '居右'], !val ? 0 : val));
    };
    PropertyInput.fontWeight = function (name, val) {
        name = 'settings[style][' + name + '][font-weight]';
        var id = PropertyInput.nameToId(name) + '_' + PropertyInput.guid();
        return PropertyInput.input(id, '字体粗细', PropertyInput.text(id, name, val, 4));
    };
    PropertyInput.option = function (items, selected) {
        var html = '';
        $.each(items, function (i) {
            var sld = selected == i ? ' selected' : '';
            html += "<option value=\"".concat(i, "\"").concat(sld, ">").concat(this, "</option>");
        });
        return html;
    };
    PropertyInput.sideInput = function (name, label, vals) {
        if (vals === void 0) { vals = []; }
        var id = PropertyInput.nameToId(name) + '_' + PropertyInput.guid();
        return PropertyInput.input(id, label, PropertyInput.side(id, name, vals), 'side-input');
    };
    PropertyInput.side = function (id, name, vals) {
        if (vals === void 0) { vals = []; }
        var html = '';
        $.each(['上', '右', '下', '左'], function (i) {
            var val = vals && vals.length > i ? vals[i] : '';
            html += "<input type=\"text\" id=\"".concat(id, "_").concat(i, "\" class=\"form-control \" name=\"").concat(name, "[]\" size=\"4\" value=\"").concat(val, "\" placeholder=\"").concat(this, "\">");
        });
        return html;
    };
    PropertyInput.radio = function (id, name, items, selected) {
        var html = '';
        var j = 0;
        $.each(items, function (i) {
            var index = [id, j++].join('_');
            var chk = i == selected ? ' checked' : '';
            html += "<span class=\"radio-label\"><input type=\"radio\" id=\"".concat(index, "\" name=\"").concat(name, "\" value=\"").concat(i, "\"").concat(chk, "><label for=\"").concat(index, "\">").concat(this, "</label></span>");
        });
        return html;
    };
    PropertyInput.checkbox = function (id, name, items, val) {
        if (val === void 0) { val = []; }
        var html = '';
        var j = 0;
        $.each(items, function (i) {
            var index = [id, j++].join('_');
            var chk = val && val.indexOf(i) >= 0 ? ' checked' : '';
            html += "<span class=\"check-label\"><input type=\"checkbox\" id=\"".concat(index, "\" name=\"").concat(name, "\" value=\"").concat(i, "\"").concat(chk, "><label for=\"").concat(index, "\">").concat(this, "</label></span>");
        });
        return html;
    };
    PropertyInput.text = function (id, name, val, size) {
        if (val === void 0) { val = ''; }
        var option = size ? " size=\"".concat(size, "\"") : '';
        if (!val) {
            val = '';
        }
        return "<input type=\"text\" id=\"".concat(id, "\" class=\"form-control\" name=\"").concat(name, "\" value=\"").concat(val, "\"").concat(option, ">");
    };
    PropertyInput.input = function (id, name, content, cls) {
        if (cls === void 0) { cls = ''; }
        return "<div class=\"input-group\"><label for=\"".concat(id, "\">").concat(name, "</label><div class=\"").concat(cls, "\">").concat(content, "</div></div>");
    };
    PropertyInput.nameToId = function (name) {
        return name.replace(/\[/g, '_').replace(/\]/g, '');
    };
    PropertyInput._guid = 0;
    return PropertyInput;
}());
var Weight = /** @class */ (function () {
    function Weight(box) {
        this.box = box;
    }
    Weight.prototype.toggle = function (state) {
        this.box.toggleClass('weight-edit-mode', state);
        return this;
    };
    Weight.prototype.toggleLoading = function (state) {
        this.box.toggleClass('weight-loading', state);
        return this;
    };
    /**
     * html
     */
    Weight.prototype.html = function (html) {
        var newBox = $(html);
        this.box = this.box.replaceWith(newBox);
        this.box = newBox;
        return this;
    };
    /**
     * id
     */
    Weight.prototype.id = function () {
        return parseInt(this.box.attr('data-id'));
    };
    /**
     * weightId
     */
    Weight.prototype.weightId = function () {
        return parseInt(this.box.attr('data-weight'));
    };
    return Weight;
}());
var Page = /** @class */ (function () {
    function Page(id, baseUri) {
        if (baseUri === void 0) { baseUri = BASE_URI; }
        this.id = id;
        this.baseUri = baseUri;
        this.box = $("#page-box");
        this.element = $('#mainMobile');
        this.bodyBox = $('#mainGrid');
        this.panelGroup = this.box.find('.panel-group');
        this.editDialog = $('#edit-dialog').dialog();
        var that = this;
        var iframe = this.bodyBox[0];
        var ready = function () {
            that.body = that.bodyBox.contents().find('body');
            that._init();
        };
        if (iframe.attachEvent) {
            iframe.attachEvent('onload', ready);
        }
        else {
            iframe.onload = ready;
        }
    }
    Page.prototype._init = function () {
        this._bindEvent();
        this.resize();
    };
    Page.prototype._bindEvent = function () {
        var that = this;
        $(window).on('resize', function () {
            that.resize();
        });
        this.body.on("click", ".weight-action .del", function () {
            that.removeWeight($(this).closest('.weight-edit-grid'));
        }).on("click", ".weight-action .edit", function (e) {
            e.stopPropagation();
            that.setWeight($(this).parents('.weight-edit-grid'));
            that.showEditDialog();
        }).on("click", ".weight-action .refresh", function (e) {
            e.stopPropagation();
            that.refreshWeight($(this).closest('.weight-edit-grid'));
        }).on("click", ".weight-action .property", function (e) {
            e.stopPropagation();
            that.setWeight($(this).closest('.weight-edit-grid'));
            that.showPropertyPanel();
        }).on('click', 'a', function (e) {
            e.preventDefault();
        });
        this.panelGroup.on('click', '.panel-item .panel-header .fa-close', function (e) {
            e.stopPropagation();
            var box = $(this).closest('.panel-item');
            box.addClass('min');
            that.resize();
        }).on('click', '.panel-item .panel-header', function () {
            var box = $(this).closest('.panel-item');
            if (box.hasClass('min')) {
                box.removeClass('min').siblings().addClass('min');
                that.resize();
            }
        }).on('click', '.expand-box .expand-header', function () {
            $(this).closest('.expand-box').toggleClass('open');
        }).on('change', '.position-input select', function () {
            var $this = $(this);
            $this.next().html(PropertyInput.positionSide($this.val()));
        }).on('click', '.background-input input[type="radio"]', function () {
            var $this = $(this);
            $this.closest('.background-input').find('.value-input').html(PropertyInput.backgroundValue($this.attr('name').replace('[type]', ''), $this.val()));
        }).on('change', 'input,textarea', function () {
            that.autoSave();
        }).on('click', '.style-item', function () {
            $(this).addClass('active').siblings().removeClass('active');
            that.autoSave();
        }).find('.weight-edit-grid').attr('draggable', 'true').on('dragstart', function (e) {
            e.originalEvent.dataTransfer.setData("Text", e.target.id);
            weight = $(this);
        });
        var weight = null;
        this.body.on('dragover', '.weight-row', function (e) {
            e.stopPropagation();
            e.preventDefault();
        }).on('drop', '.weight-row', function (e) {
            e.stopPropagation();
            e.preventDefault();
            that.addWeight(weight.clone(), $(this));
        });
        this.editDialog.box.on('click', '.multiple-box .multiple-add-btn', function () {
            var $this = $(this);
            $this.before($this.prev('.item').clone());
        }).on('click', '.multiple-box .multiple-del-btn', function () {
            var $this = $(this);
            if ($this.closest('.multiple-box').find('.item').length > 1) {
                $this.closest('.item').remove();
            }
        });
        this.editDialog.on('done', function () {
            that.post(EDIT_URI, that.editDialog.find('.dialog-body').serialize(), function (res) {
                if (res.code !== 200) {
                    return;
                }
                that.showPropertyPanel();
                that.weight.html(res.data.html);
            });
            this.close();
        });
        this.bindRule();
    };
    Page.prototype.autoSave = function () {
        var _this = this;
        var data = formData(this.panelGroup.find('.form-table')) + '&theme_style_id=' + this.panelGroup.find('.style-item.active').attr('data-id') + '&id=' + this.weight.id();
        this.post(EDIT_URI, data, function (res) {
            if (res.code !== 200) {
                return;
            }
            _this.weight.html(res.data.html);
        });
    };
    Page.prototype.showEditDialog = function () {
        var that = this;
        this.post(EDIT_DAILOG_URI, {
            id: this.weight.id()
        }, function (data) {
            if (data.code !== 200) {
                return;
            }
            that.editDialog.find('.dialog-body').html('<input type="hidden" name="id" value="' + that.weight.id() + '">' + data.data.html);
            that.editDialog.show();
        });
    };
    Page.prototype.showPropertyPanel = function () {
        var _this = this;
        this.post(SETTING_URI, {
            id: this.weight.id()
        }, function (res) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            if (res.code !== 200) {
                return;
            }
            var data = res.data;
            var styles = (_a = data.settings) === null || _a === void 0 ? void 0 : _a.style;
            var items = _this.panelGroup.find('.form-table .tab-item');
            items[0].innerHTML = PropertyInput.title(data.title) + PropertyInput.lazy((_b = data.settings) === null || _b === void 0 ? void 0 : _b.lazy);
            var boxes = $(items[1]).find('.expand-body');
            boxes[0].innerHTML = PropertyInput.margin(styles === null || styles === void 0 ? void 0 : styles.margin)
                + PropertyInput.position(styles === null || styles === void 0 ? void 0 : styles.position)
                + PropertyInput.border(null, styles === null || styles === void 0 ? void 0 : styles.border)
                + PropertyInput.radius(null, data.settings ? data.settings['border-radius'] : null)
                + PropertyInput.color(null, (_c = data.settings) === null || _c === void 0 ? void 0 : _c.color)
                + PropertyInput.background(null, (_d = data.settings) === null || _d === void 0 ? void 0 : _d.background);
            boxes[1].innerHTML = PropertyInput.visibility('title', (_e = styles === null || styles === void 0 ? void 0 : styles.title) === null || _e === void 0 ? void 0 : _e.visibility)
                + PropertyInput.padding('title', (_f = styles === null || styles === void 0 ? void 0 : styles.title) === null || _f === void 0 ? void 0 : _f.padding)
                + PropertyInput.border('title', (_g = styles === null || styles === void 0 ? void 0 : styles.title) === null || _g === void 0 ? void 0 : _g.border)
                + PropertyInput.radius('title', styles === null || styles === void 0 ? void 0 : styles.title['border-radius'])
                + PropertyInput.color('title', (_h = styles === null || styles === void 0 ? void 0 : styles.title) === null || _h === void 0 ? void 0 : _h.color)
                + PropertyInput.fontSize('title', styles === null || styles === void 0 ? void 0 : styles.title['font-size'])
                + PropertyInput.fontWeight('title', styles === null || styles === void 0 ? void 0 : styles.title['font-weight'])
                + PropertyInput.textAlign('title', styles === null || styles === void 0 ? void 0 : styles.title['text-align'])
                + PropertyInput.background('title', (_j = styles === null || styles === void 0 ? void 0 : styles.title) === null || _j === void 0 ? void 0 : _j.background);
            boxes[2].innerHTML = PropertyInput.visibility('content', (_k = styles === null || styles === void 0 ? void 0 : styles.content) === null || _k === void 0 ? void 0 : _k.visibility)
                + PropertyInput.padding('content', (_l = styles === null || styles === void 0 ? void 0 : styles.content) === null || _l === void 0 ? void 0 : _l.padding)
                + PropertyInput.border('content', (_m = styles === null || styles === void 0 ? void 0 : styles.content) === null || _m === void 0 ? void 0 : _m.border)
                + PropertyInput.radius('content', styles === null || styles === void 0 ? void 0 : styles.content['border-radius'])
                + PropertyInput.color('content', (_o = styles === null || styles === void 0 ? void 0 : styles.content) === null || _o === void 0 ? void 0 : _o.color)
                + PropertyInput.fontSize('content', styles === null || styles === void 0 ? void 0 : styles.content['font-size'])
                + PropertyInput.fontWeight('content', styles === null || styles === void 0 ? void 0 : styles.content['font-weight'])
                + PropertyInput.textAlign('content', styles === null || styles === void 0 ? void 0 : styles.content['text-align'])
                + PropertyInput.background('content', (_p = styles === null || styles === void 0 ? void 0 : styles.content) === null || _p === void 0 ? void 0 : _p.background);
            _this.panelGroup.find('.style-item').each(function () {
                var $this = $(this);
                $this.toggleClass('active', $this.attr('data-id') == data.theme_style_id);
            });
            _this.showPanel('property');
        });
    };
    /**
     * showPanel
     */
    Page.prototype.showPanel = function (name) {
        var panel = this.panelGroup.find('[data-panel=' + name + ']');
        panel.removeClass('min').siblings().addClass('min');
        return panel;
    };
    /**
     * bindRule
     */
    Page.prototype.bindRule = function () {
        var line, mode = 0;
        var ruleBox = this.element.find('.rule-box').on('mousedown', '.rule-lines div', function (e) {
            e.stopPropagation();
            mode = 0;
            line = $(this);
        }).on('mousedown', '.top-rule', function () {
            mode = 1;
        }).on('mousemove', '.top-rule', function () {
            if (mode === 1) {
                line = $('<div class="h-line"></div>');
                ruleBox.find('.rule-lines').append(line);
                mode = 0;
            }
        }).on('mousedown', '.left-rule', function () {
            mode = 2;
        }).on('mousemove', '.left-rule', function () {
            if (mode === 2) {
                line = $('<div class="v-line"></div>');
                ruleBox.find('.rule-lines').append(line);
                mode = 0;
            }
        });
        $(document).on('mousemove', function (e) {
            if (!line) {
                return;
            }
            if (line.hasClass('v-line')) {
                line.css('left', e.clientX + 'px');
                return;
            }
            var top = e.clientY - ruleBox.offset().top;
            line.css('top', top + 'px');
        }).on('mouseup', function () {
            if (!line) {
                return;
            }
            if (line.hasClass('v-line')) {
                line.offset().left < 20 && line.remove();
            }
            else {
                (line.offset().top - ruleBox.offset().top) < 20 && line.remove();
            }
            line = undefined;
        });
    };
    /**
     * refreshWeight
     */
    Page.prototype.refreshWeight = function (element) {
        if (!element && !this.weight) {
            return;
        }
        if (!element) {
            var weight_1 = this.weight.toggleLoading(true);
            this.post(REFRESH_URI, {
                id: weight_1.id()
            }, function (data) {
                weight_1.toggleLoading(false);
                if (data.code == 200) {
                    weight_1.html(data.data.html);
                }
            });
            return;
        }
        var id = element.attr('data-id'), weight = this.setWeight(element, false).toggleLoading(true);
        this.post(REFRESH_URI, {
            id: id
        }, function (data) {
            weight.toggleLoading(false);
            if (data.code == 200) {
                weight.html(data.data.html);
            }
        });
    };
    Page.prototype.setWeight = function (element, withEdit) {
        if (withEdit === void 0) { withEdit = true; }
        if (this.weight) {
            this.weight.toggle(false);
        }
        this.weight = new Weight(element);
        this.weight.toggle(true);
        if (withEdit) {
        }
        return this.weight;
    };
    Page.prototype.removeWeight = function (element) {
        this.post(DEL_URI, {
            id: element.attr('data-id')
        }, function (data) {
            if (data.code == 200) {
                element.remove();
            }
        });
    };
    Page.prototype.addWeight = function (element, parent) {
        var that = this;
        parent.append(element);
        element.width('auto');
        var weight = this.setWeight(element).toggleLoading(true);
        this.post(NEW_URI, {
            weight_id: element.attr('data-weight'),
            parent_id: parent.attr('data-id')
        }, function (data) {
            weight.toggleLoading(false);
            if (data.code == 200) {
                weight.html(data.data.html);
            }
        });
        return weight;
    };
    Page.prototype.resize = function () {
        var width = 16;
        this.panelGroup.find('.panel-item').each(function () {
            if (!$(this).hasClass('min')) {
                width = 16 * 15;
            }
        });
        this.panelGroup.width(width);
        this.panelGroup.find('.panel-body .tab-body').height(this.panelGroup.height() - 60);
        this.box.css('padding-left', width + 'px');
        var height = $(window).height() - this.box.offset().top;
        this.box.height(height);
        var isMobile = !!this.element.attr('class');
        if (!isMobile) {
            this.element.height(height - 25);
        }
        var top = isMobile ? this.bodyBox.offset().top - this.element.offset().top - 20 : 0;
        var left = isMobile ? this.bodyBox.offset().left - this.element.offset().left - 20 : 0;
        this.drawRule(this.element.find('.top-rule').css('top', top + 'px'), left + 20);
        this.drawRule(this.element.find('.left-rule').css('left', left + 'px'), top + 20);
        this.bodyBox.width(this.element.width() - 20);
        this.bodyBox.height(this.element.height() - 20);
    };
    Page.prototype.html = function () {
        return $.htmlClean(this.body.html(), {
            format: true,
            allowedAttributes: [
                ["id"],
                ["class"],
                ["data-toggle"],
                ["data-target"],
                ["data-parent"],
                ["role"],
                ["data-dismiss"],
                ["aria-labelledby"],
                ["aria-hidden"],
                ["data-slide-to"],
                ["data-slide"]
            ]
        });
    };
    /**
     * getSetting
     */
    Page.prototype.getSetting = function (id, cb) {
        var that = this;
        if (this._cacheSettings.hasOwnProperty(id)) {
            cb && cb(this._cacheSettings[id]);
            return this;
        }
        this.post(SETTING_URI, {
            id: id
        }, function (data) {
            if (data.code == 200) {
                that._cacheSettings[id] = data.data;
                cb && cb(data.data);
            }
        });
        return this;
    };
    /**
     * saveSetting
     */
    Page.prototype.saveSetting = function (id, args, cb) {
        var that = this;
        this.post(SAVE_SETTING_URI, {
            id: id,
            setting: args
        }, function (data) {
            if (data.code == 200) {
                that._cacheSettings[id] = data;
                cb && cb(data.data);
            }
        });
        return this;
    };
    /**
     * postJson
     */
    Page.prototype.post = function (path, data, cb) {
        if (typeof data === 'string') {
            data += '&page_id=' + this.id;
        }
        else {
            data['page_id'] = this.id;
        }
        postJson(this.baseUri + path, data, cb);
        return this;
    };
    /**
     * drawRule
     */
    Page.prototype.drawRule = function (box, start, scale) {
        if (scale === void 0) { scale = 1; }
        var width = box.width(), height = box.height();
        var canvas = box[0];
        canvas.width = width;
        canvas.height = height;
        var context = canvas.getContext('2d');
        context.clearRect(0, 0, canvas.width, canvas.height);
        var direct = canvas.width > canvas.height; // true 横向
        var length = direct ? canvas.width : canvas.height;
        for (var i = start; i < length; i += 10) {
            var real = i - start;
            var len = real % 50 === 0 ? 10 : 5;
            this.drawLine(context, direct, i, len, len > 5 ? real.toString() : undefined);
        }
    };
    Page.prototype.drawLine = function (context, direct, i, length, tip) {
        if (direct) {
            context.moveTo(i, 20 - length);
            context.lineTo(i, 20);
        }
        else {
            context.moveTo(20 - length, i);
            context.lineTo(20, i);
        }
        context.lineWidth = 1;
        context.strokeStyle = "red";
        context.stroke();
        if (!tip) {
            return;
        }
        context.font = '6px Microsoft YaHei';
        if (direct) {
            context.fillText(tip, i - 5, 10);
        }
        else {
            context.fillText(tip, 0, i + 3);
        }
    };
    return Page;
}());
function bindPage(pageId) {
    var editor = new VisualEditor($('#page-box'));
    editor.on(EditorEventGetWeights, function (sucess, failure) {
        $.getJSON(BASE_URI + 'weight?id=' + pageId, function (data) {
            if (data.code == 200) {
                sucess(data.data);
                return;
            }
            failure(data.message);
        });
    }).on(EditorEventGetPage, function (sucess, failure) {
        $.getJSON(BASE_URI + 'page/detail?id=' + pageId, function (data) {
            if (data.code == 200) {
                sucess(data.data);
                return;
            }
            failure(data.message);
        });
    }).on(EditorEventGetWeightProperty, function (weightId, sucess, failure) {
        $.getJSON(BASE_URI + 'weight/setting?id=' + weightId, function (data) {
            if (data.code == 200) {
                sucess(data.data);
                return;
            }
            failure(data.message);
        });
    }).on(EditorEventWeightForm, function (weightId, sucess, failure) {
        $.getJSON(BASE_URI + 'weight/form?id=' + weightId, function (data) {
            if (data.code == 200) {
                sucess(data.data);
                return;
            }
            failure(data.message);
        });
    }).on(EditorEventSaveWeightProperty, function (weightId, data, sucess, failure) {
        postJson(BASE_URI + 'weight/save', typeof data !== 'object' ? data : __assign({ id: weightId }, data), function (res) {
            if (res.code == 200) {
                sucess(res.data);
                return;
            }
            failure(res.message);
        });
    }).on(EditorEventRefreshWeight, function (weightId, sucess, failure) {
        $.getJSON(BASE_URI + 'weight/refresh?id=' + weightId, function (data) {
            if (data.code == 200) {
                sucess(data.data);
                return;
            }
            failure(data.message);
        });
    }).on(EditorEventAddWeight, function (data, sucess, failure) {
        postJson(BASE_URI + 'weight/create', __assign({ page_id: pageId }, data), function (res) {
            if (res.code == 200) {
                sucess(res.data);
                return;
            }
            failure(res.message);
        });
    }).on(EditorEventRemoveWeight, function (weightId, sucess, failure) {
        postJson(BASE_URI + 'weight/destroy', {
            id: weightId
        }, function (res) {
            if (res.code == 200) {
                sucess(res.data);
                return;
            }
            failure(res.message);
        });
    }).on(EditorEventSavePage, function (weights, sucess, failure) {
        postJson(BASE_URI + 'weight/batch_save', {
            id: pageId,
            weights: weights
        }, function (res) {
            if (res.code == 200) {
                sucess(res.data);
                return;
            }
            failure(res.message);
        });
    });
    editor.run();
    $('body').addClass('full-edit-mode');
    $(".mobile-size li").on('click', function () {
        var $this = $(this);
        $this.addClass("active").siblings().removeClass("active");
        $this.closest(".mobile-size").parent().removeClass("open");
        var size = $this.attr("data-size").split("*");
        if (size.length < 2 || !size[0] || !size[1]) {
            editor.normal();
            return;
        }
        editor.mobile(parseInt(size[0]), parseInt(size[1]));
    });
    $(".navbar>li>div").on('click', function () {
        $(this).parent().toggleClass("open");
    });
    $(".mobile-rotate").on('click', function () {
        editor.rotate(90);
    });
    $(".expand>.head").on('click', function () {
        $(this).parent().toggleClass("open");
    });
    if ($(window).width() > 769) {
        $('.sidebar-container-toggle').trigger('click');
    }
}
function bindEdit() {
    $('.theme-select').on('click', '.theme-item', function () {
        $(this).addClass('active').siblings().removeClass('active');
        $('input[name=theme_id]').val($(this).data('id'));
    });
}
var SearchDailog = /** @class */ (function () {
    function SearchDailog(element) {
        var _this = this;
        this.selected = [];
        this._selected = [];
        this.dialog = $(element).dialog({});
        $.get(this.dialog.box.data('url'), {
            selected: this.selected.join(',')
        }, function (html) {
            _this.html(html);
        });
        this.bindEvent();
    }
    SearchDailog.prototype.bindEvent = function () {
        var _this = this;
        var that = this;
        this.on('submit', '.dialog-search form', function () {
            var $this = $(this);
            $.get($this.attr('action'), $this.serialize() + '&selected=' + that.selected.join(','), function (html) {
                that.html(html);
            });
            return false;
        }).on('click', '.dialog-body-box .item', function () {
            var $this = $(this).toggleClass('selected');
            var id = parseInt($this.data('id'), 10);
            that.toggleItem(id, $this.hasClass('selected'));
        }).on('click', '.dialog-pager a', function (e) {
            e.preventDefault();
            $.get($(this).attr('href'), function (html) {
                that.html(html);
            });
        });
        this.dialog.on('done', function () {
            _this.selected = __spreadArray([], _this._selected, true);
            _this.dialog.close();
            _this._doneCallback && _this._doneCallback.call(_this, _this.selected);
        });
    };
    /**
     */
    SearchDailog.prototype.toggleItem = function (id, has) {
        if (id < 1) {
            return;
        }
        var index = this._selected.indexOf(id);
        if (typeof has === 'undefined') {
            has = index < 0;
        }
        if (has) {
            if (index < 0) {
                this._selected.push(id);
            }
            return;
        }
        if (index >= 0) {
            this._selected = this._selected.splice(index, 1);
        }
    };
    /**
     * html
     */
    SearchDailog.prototype.html = function (html) {
        if (html.indexOf('dialog-body-box') > 0) {
            this.find('.dialog-body').html(html);
        }
        else {
            this.find('.dialog-body .dialog-body-box').html(html);
        }
        this.dialog.resize();
        return this;
    };
    SearchDailog.prototype.find = function (tag) {
        return this.dialog.find(tag);
    };
    SearchDailog.prototype.on = function (event, tag, cb) {
        if (event === 'done') {
            this._doneCallback = tag;
            return this;
        }
        this.dialog.box.on(event, tag, cb);
        return this;
    };
    /**
     * show
     */
    SearchDailog.prototype.show = function () {
        var _this = this;
        this._selected = __spreadArray([], this.selected, true);
        this.find('.dialog-body-box .item').each(function (_, item) {
            var $this = $(item);
            $this.toggleClass('selected', _this._selected.indexOf($this.data('id')) >= 0);
        });
        this.dialog.show();
    };
    return SearchDailog;
}());
function bindNewTheme() {
    var box = new SearchDailog('.theme-dialog');
    $('*[data-type="add"]').on('click', function () {
        box.show();
    });
    box.on('done', function (selected) {
    });
}
