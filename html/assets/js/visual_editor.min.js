var EditorEventGetWeights = 'editor_get_wegihts';
var EditorEventGetWeightProperty = 'editor_get_wegiht_property';
var EditorEventSaveWeightProperty = 'editor_save_wegiht_property';
var EditorEventRefreshWeight = 'editor_refresh_weight';
var EditorEventAddWeight = 'editor_add_weight';
var EditorEventMoveWeight = 'editor_move_weight';
var EditorEventWeightForm = 'editor_weight_form';
var EditorEventRemoveWeight = 'editor_remove_weight';
var EditorEventSavePage = 'editor_save_page';
var EditorEventGetPage = 'editor_get_page';
var EditorEventResize = 'editor_resize';
var EditorEventOuterWidthChange = 'editor_outer_width_change'; // 外部
var EditorEventViewInit = 'editor_view_init'; // 只能获取所需的元素，请不要获取其他尺寸信息
var EditorEventGetStyleSuccess = 'editor_get_style_success';
var EditorEventAfterViewInit = 'editor_after_view_init';
var EditorEventBrowserResize = 'editor_browser_resize';
var EditorEventScroll = 'editor_scroll';
var EditorEventPositionChange = 'editor_position_change';
var EditorEventDragStart = 'editor_drag_start';
var EditorEventBrowserReady = 'editor_browser_ready';
var EditorEventOpenEditDialog = 'editor_open_edit_dialog';
var EditorEventOpenProperty = 'editor_open_property';
var EditorMobileStyle = 'mobile-style';
var VisualEditor = /** @class */ (function () {
    function VisualEditor(box) {
        this.box = box;
        this.listeners = {};
        this.mouseListener = {
            move: undefined,
            finish: undefined,
        };
        this.hScrollBar = new EditorScrollBar(this, true);
        this.vScrollBar = new EditorScrollBar(this, false);
        this.toolBar = new EditorToolBar(this);
        this.hRuleBar = new EditorRuler(this, true);
        this.vRuleBar = new EditorRuler(this, false);
        this.browser = new EditorBrowser(this);
        this.panelGroup = new EditorPanelGroup(this);
        this.dialog = new EditorDialog(this);
        this.viewInited = false; // 页面是否加载完成
        this.browserAdaptive = false; // 是否启动自适应
    }
    Object.defineProperty(VisualEditor.prototype, "outerWidth", {
        get: function () {
            return this.box.width();
        },
        set: function (arg) {
            this.box.width(arg);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualEditor.prototype, "outerHeight", {
        get: function () {
            return this.box.height();
        },
        set: function (arg) {
            this.box.height(arg);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualEditor.prototype, "innerWidth", {
        // 工作区间的尺寸
        get: function () {
            if (!this.viewInited) {
                return 0;
            }
            return this.workspace.width() - this.vScrollBar.barSize - this.vRuleBar.barSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualEditor.prototype, "innerHeight", {
        get: function () {
            if (!this.viewInited) {
                return 0;
            }
            return this.workspace.height() - this.hRuleBar.barSize - this.hScrollBar.barSize;
        },
        enumerable: false,
        configurable: true
    });
    VisualEditor.prototype.on = function (event, cb) {
        if (!Object.prototype.hasOwnProperty.call(this.listeners, event)) {
            this.listeners[event] = [];
        }
        this.listeners[event].push(cb);
        return this;
    };
    VisualEditor.prototype.emit = function (event) {
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            items[_i - 1] = arguments[_i];
        }
        if (!Object.prototype.hasOwnProperty.call(this.listeners, event)) {
            return this;
        }
        var listeners = this.listeners[event];
        for (var i = listeners.length - 1; i >= 0; i--) {
            var cb = listeners[i];
            var res = cb.apply(void 0, items);
            //  允许事件不进行传递
            if (res === false) {
                break;
            }
        }
        return this;
    };
    Object.defineProperty(VisualEditor.prototype, "hasMouseListener", {
        get: function () {
            return typeof this.mouseListener.move !== 'undefined';
        },
        enumerable: false,
        configurable: true
    });
    /**
     * 鼠标移动事件监听
     * @param move
     * @param finish
     */
    VisualEditor.prototype.onMouse = function (move, finish) {
        var _this = this;
        this.mouseListener = {
            move: move,
            finish: !move && !finish ? undefined : function (p) {
                _this.mouseListener = { move: undefined, finish: undefined };
                finish && finish(p);
            },
        };
    };
    /**
     * 切换为手机模式
     * @param width
     * @param height
     */
    VisualEditor.prototype.mobile = function (width, height) {
        this.browserAdaptive = false;
        this.box.addClass(EditorMobileStyle);
        this.resize(width, height);
    };
    VisualEditor.prototype.normal = function (width, height) {
        this.box.removeClass(EditorMobileStyle);
        if (width && height) {
            this.browserAdaptive = false;
            this.resize(width, height);
            return;
        }
        this.browserAdaptive = true;
        this.resize(this.innerWidth, this.innerHeight);
    };
    /**
     * 修改视图尺寸
     * @param width
     * @param height
     */
    VisualEditor.prototype.resize = function (width, height) {
        this.browser.resize(width, height);
    };
    /**
     * 重置滚动和缩放比例
     */
    VisualEditor.prototype.reset = function () {
        this.browser.reset();
    };
    /**
     * 获取页面布局
     */
    VisualEditor.prototype.serialize = function () {
        return this.browser.serialize();
    };
    /**
     * 反转browser的高和宽
     */
    VisualEditor.prototype.rotate = function () {
        this.browser.rotate();
    };
    /**
     * 缩放比例
     * @param scale /100
     */
    VisualEditor.prototype.scale = function (scale) {
        this.browser.scale(scale);
    };
    VisualEditor.prototype.find = function (name) {
        return this.box.find(name);
    };
    VisualEditor.prototype.run = function () {
        var _this = this;
        this.viewInited = false;
        this.bindEvent();
        this.viewInit();
        this.emit(EditorEventGetPage, function (data) {
            _this.browser.navigate(data.edit_url);
        }, function (message) {
        });
    };
    VisualEditor.prototype.bindEvent = function () {
        var _this = this;
        var $window = $(window);
        $window.on('resize', function () {
            var top = _this.box.offset().top;
            var height = $window.height() - top - 20;
            _this.outerHeight = height;
            if (!_this.viewInited) {
                return;
            }
            _this.emit(EditorEventResize, _this.innerWidth, _this.innerHeight);
        });
        $(document).on('keydown', function (e) {
            if (e.ctrlKey) {
                if (e.code == 'KeyS') {
                    e.preventDefault();
                    _this.emit(EditorEventSavePage, _this.serialize());
                }
            }
        }).on('paste', function (e) {
            if (e.clipboardData || e.originalEvent) {
                var clipboardData = (e.clipboardData || window.clipboardData);
                var val = clipboardData.getData('text');
            }
        }).on('mousemove', function (e) {
            if (_this.mouseListener.move) {
                _this.mouseListener.move({ x: e.clientX, y: e.clientY });
            }
        }).on('mouseup', function (e) {
            if (_this.mouseListener.finish) {
                _this.mouseListener.finish({ x: e.clientX, y: e.clientY });
            }
        });
        this.on(EditorEventResize, function (width, height) {
            if (_this.browserAdaptive) {
                _this.resize(width, height);
            }
        }).on(EditorEventOuterWidthChange, function () {
            if (!_this.viewInited) {
                return;
            }
            _this.emit(EditorEventResize, _this.innerWidth, _this.innerHeight);
        }).on(EditorEventAfterViewInit, function () {
            _this.emit(EditorEventResize, _this.innerWidth, _this.innerHeight);
            _this.normal();
        });
        this.loopCheckBox();
    };
    /**
     * 循环检测box的宽度变化
     */
    VisualEditor.prototype.loopCheckBox = function () {
        var _this = this;
        var lastBoxWidth = this.box.width();
        var space = 500;
        var checkFunc = function () {
            var now = new Date();
            _this.shellTimeBar.text([now.getHours(), now.getMinutes()].map(EditorHelper.twoPad).join(':'));
            var w = _this.box.width();
            if (lastBoxWidth !== w) {
                lastBoxWidth = w;
                _this.emit(EditorEventOuterWidthChange, w);
            }
            setTimeout(checkFunc, space);
        };
        setTimeout(checkFunc, space);
    };
    VisualEditor.prototype.viewInit = function () {
        this.box.addClass('visual-editor');
        this.box.html("\n        <div class=\"panel-group\"></div>\n        <div class=\"editor-container\">\n            <div class=\"work-container\">\n                <div class=\"shell-box\">\n                    <div class=\"shell-bar\">\n                        <div>\n                            <i class=\"fa fa-ellipsis-h\"></i>\n                            <i class=\"fa fa-signal\"></i>\n                            <i class=\"fa fa-wifi\"></i>\n                        </div>\n                        <div class=\"time\">\n                        </div>\n                        <div class=\"pull-right\">\n                            100%\n                            <i class=\"fa fa-battery-full\"></i>\n                        </div>\n                    </div>\n                </div>\n                <iframe class=\"panel-main\"></iframe>\n            </div>\n            <div class=\"rule-box\">\n                <canvas class=\"h-rule-bar\"></canvas>\n                <canvas class=\"v-rule-bar\"></canvas>\n                <div class=\"rule-line-bar\"></div>\n            </div>\n            <div class=\"h-scroll-bar\">\n                <div class=\"inner-bar\"></div>\n            </div>\n            <div class=\"v-scroll-bar\">\n                <div class=\"inner-bar\"></div>\n            </div>\n            <div class=\"panel-tool-bar\">\n                <i class=\"fa fa-minus-circle\" title=\"\u7F29\u5C0F\"></i>\n                <i class=\"scale-text\">100%</i>\n                <i class=\"fa fa-plus-circle\" title=\"\u653E\u5927\"></i>\n                <i class=\"fa fa-expand-arrows-alt\" title=\"\u91CD\u7F6E\"></i>\n                <i class=\"fa fa-expand\" title=\"\u5168\u5C4F\"></i>\n                <i class=\"fa fa-undo\" title=\"\u7FFB\u8F6C\"></i>\n            </div>\n        </div>\n        <div class=\"dialog dialog-box editor-dialog\" data-type=\"dialog\" >\n            <div class=\"dialog-header\">\n                <div class=\"dialog-title\">\u7F16\u8F91</div>\n                <i class=\"fa fa-close dialog-close\"></i>\n            </div>\n            <form class=\"dialog-body form-table custom-config-view\">\n                \n            </form>\n            <div class=\"dialog-footer\">\n                <button type=\"button\" class=\"dialog-yes\">\u786E\u8BA4</button>\n                <button type=\"button\" class=\"dialog-close\">\u53D6\u6D88</button>\n            </div>\n        </div>\n        ");
        this.emit(EditorEventViewInit);
        this.workspace = this.find('.editor-container');
        this.ruleLinePanel = this.find('.rule-line-bar');
        this.shellTimeBar = this.find('.shell-bar .time');
        this.viewInited = true;
        this.emit(EditorEventAfterViewInit);
    };
    return VisualEditor;
}());
var EditorToolBar = /** @class */ (function () {
    function EditorToolBar(editor) {
        var _this = this;
        this.editor = editor;
        this.scaleValue = 100;
        this.editor.on(EditorEventViewInit, function () {
            var box = _this.editor.find('.panel-tool-bar');
            _this.scaleBar = box.find('.scale-text');
            _this.bindEvent(box);
        }).on(EditorEventPositionChange, function (left, top, scale) {
            _this.scaleValue = scale;
            _this.scaleBar.text(scale + '%');
        });
    }
    EditorToolBar.prototype.bindEvent = function (box) {
        var _this = this;
        box.on('click', '.fa-minus-circle', function () {
            if (_this.scaleValue < 30) {
                return;
            }
            _this.editor.scale(_this.scaleValue - 10);
        }).on('click', '.fa-plus-circle', function () {
            if (_this.scaleValue > 300) {
                return;
            }
            _this.editor.scale(_this.scaleValue + 10);
        }).on('click', '.fa-undo', function () {
            _this.editor.rotate();
        }).on('click', '.fa-expand', function () {
            _this.editor.normal();
        }).on('click', '.fa-expand-arrows-alt', function () {
            _this.editor.reset();
        });
    };
    return EditorToolBar;
}());
var EditorPanelGroup = /** @class */ (function () {
    function EditorPanelGroup(editor) {
        var _this = this;
        this.editor = editor;
        this.children = [
            new EditorWeightPanel(this.editor),
            new EditorPropertyPanel(this.editor),
        ];
        this.renderedChildren = [];
        this.visible = true;
        this.editor.on(EditorEventViewInit, function () {
            _this.box = _this.editor.find('.panel-group');
            for (var _i = 0, _a = _this.children; _i < _a.length; _i++) {
                var item = _a[_i];
                _this.onRender(item);
            }
        }).on(EditorEventAfterViewInit, function () {
            _this.bindEvent();
        }).on(EditorEventResize, function () {
            var maxHeight = _this.editor.outerHeight;
            for (var _i = 0, _a = _this.renderedChildren; _i < _a.length; _i++) {
                var item = _a[_i];
                item.target.find('.panel-body').height(maxHeight - 36);
            }
        });
    }
    EditorPanelGroup.prototype.bindEvent = function () {
        var that = this;
        this.box.on('click', '.panel-item .panel-header .fa-close', function (e) {
            e.stopPropagation();
            var target = $(this).closest('.panel-item');
            for (var _i = 0, _a = that.renderedChildren; _i < _a.length; _i++) {
                var item = _a[_i];
                if (that.isSame(item.target, target)) {
                    item.control.hide();
                }
            }
            that.toggle(false);
        }).on('click', '.panel-header', function () {
            var target = $(this).closest('.panel-item');
            if (!target.hasClass('min')) {
                return;
            }
            for (var _i = 0, _a = that.renderedChildren; _i < _a.length; _i++) {
                var item = _a[_i];
                if (that.isSame(item.target, target)) {
                    item.control.show();
                }
                else {
                    item.control.hide();
                }
            }
            that.toggle(true);
        }).on('click', '.expand-box .expand-header', function () {
            $(this).closest('.expand-box').toggleClass('open');
        });
    };
    EditorPanelGroup.prototype.toggle = function (visible) {
        if (this.visible === visible) {
            return;
        }
        this.box.toggleClass('min', !visible);
        this.visible = visible;
        this.editor.emit(EditorEventResize, this.editor.innerWidth, this.editor.innerHeight);
    };
    EditorPanelGroup.prototype.add = function (child) {
        this.children.push(child);
        this.onRender(child);
    };
    EditorPanelGroup.prototype.onRender = function (child) {
        if (!this.box) {
            return;
        }
        this.children.indexOf(child);
        var target = child.render();
        this.box.append(target);
        target.addClass('panel-item');
        if (this.renderedChildren.length > 0) {
            child.hide();
        }
        else {
            child.show();
        }
        this.renderedChildren.push({
            target: target,
            control: child
        });
    };
    EditorPanelGroup.prototype.isSame = function (ele, dist) {
        return ele.is(dist);
    };
    return EditorPanelGroup;
}());
var EditorPropertyPanel = /** @class */ (function () {
    function EditorPropertyPanel(editor) {
        var _this = this;
        this.editor = editor;
        this.editor.on(EditorEventGetStyleSuccess, function (data) {
            _this.renderStyle(data);
        }).on(EditorEventOpenProperty, function (weight) {
            _this.box.find('.panel-header').trigger('click');
            _this.target = weight;
            _this.editor.emit(EditorEventGetWeightProperty, weight.id(), function (data) {
                _this.applyForm(data);
            });
        });
        // const EditorEventOpenProperty = 'editor_open_property';
    }
    EditorPropertyPanel.prototype.render = function () {
        this.box = $("<div class=\"panel-item min\" data-panel=\"property\"></div");
        this.box.html("\n            <div class=\"panel-header\">\n                <span class=\"title\">\u5C5E\u6027</span>\n                <a class=\"fa fa-close\"></a>\n            </div>\n            <div class=\"panel-body\">\n            <div class=\"tab-box\">\n                    <div class=\"tab-header\"><div class=\"tab-item active\">\n                            \u666E\u901A\n                        </div><div class=\"tab-item\">\n                            \u9AD8\u7EA7\n                        </div><div class=\"tab-item\">\n                            \u6837\u5F0F\n                        </div></div>\n                    <div class=\"tab-body form-table\">\n                        <div class=\"tab-item active\">\n                        </div>\n                        <div class=\"tab-item\">\n                        <div class=\"expand-box open\">\n                                <div class=\"expand-header\">\u6574\u4F53<span class=\"fa fa-chevron-down\"></span></div>\n                                <div class=\"expand-body\">\n                                    \n                                </div>\n                            </div>\n                            <div class=\"expand-box\">\n                                <div class=\"expand-header\">\u6807\u9898<span class=\"fa fa-chevron-down\"></span></div>\n                                <div class=\"expand-body\">\n                                    \n                                </div>\n                            </div>\n                            <div class=\"expand-box\">\n                                <div class=\"expand-header\">\u5185\u5BB9<span class=\"fa fa-chevron-down\"></span></div>\n                                <div class=\"expand-body\">\n                                    \n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"tab-item style-panel\">\n                            <div class=\"style-item\" data-id=\"0\">\n                                \u65E0\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ");
        return this.box;
    };
    EditorPropertyPanel.prototype.renderStyle = function (items) {
        var html = EditorHtmlHelper.mapJoinHtml(items, function (item) {
            return "<div class=\"style-item\" data-id=\"".concat(item.id, "\">\n            <img src=\"").concat(item.thumb, "\" alt=\"").concat(item.name, "\">\n        </div>");
        });
        this.box.find('.style-panel').append(html);
    };
    EditorPropertyPanel.prototype.show = function () {
        this.box.removeClass('min');
    };
    EditorPropertyPanel.prototype.hide = function () {
        this.box.addClass('min');
    };
    EditorPropertyPanel.prototype.applyForm = function (data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        var styles = (_a = data.settings) === null || _a === void 0 ? void 0 : _a.style;
        var items = this.box.find('.form-table .tab-item');
        items[0].innerHTML = EditorHtmlHelper.title(data.title) + EditorHtmlHelper.lazy((_b = data.settings) === null || _b === void 0 ? void 0 : _b.lazy);
        var boxes = $(items[1]).find('.expand-body');
        boxes[0].innerHTML = EditorHtmlHelper.margin(styles === null || styles === void 0 ? void 0 : styles.margin)
            + EditorHtmlHelper.position(styles === null || styles === void 0 ? void 0 : styles.position)
            + EditorHtmlHelper.border(null, styles === null || styles === void 0 ? void 0 : styles.border)
            + EditorHtmlHelper.radius(null, data.settings ? data.settings['border-radius'] : null)
            + EditorHtmlHelper.color(null, (_c = data.settings) === null || _c === void 0 ? void 0 : _c.color)
            + EditorHtmlHelper.background(null, (_d = data.settings) === null || _d === void 0 ? void 0 : _d.background);
        boxes[1].innerHTML = EditorHtmlHelper.visibility('title', (_e = styles === null || styles === void 0 ? void 0 : styles.title) === null || _e === void 0 ? void 0 : _e.visibility)
            + EditorHtmlHelper.padding('title', (_f = styles === null || styles === void 0 ? void 0 : styles.title) === null || _f === void 0 ? void 0 : _f.padding)
            + EditorHtmlHelper.border('title', (_g = styles === null || styles === void 0 ? void 0 : styles.title) === null || _g === void 0 ? void 0 : _g.border)
            + EditorHtmlHelper.radius('title', styles === null || styles === void 0 ? void 0 : styles.title['border-radius'])
            + EditorHtmlHelper.color('title', (_h = styles === null || styles === void 0 ? void 0 : styles.title) === null || _h === void 0 ? void 0 : _h.color)
            + EditorHtmlHelper.fontSize('title', styles === null || styles === void 0 ? void 0 : styles.title['font-size'])
            + EditorHtmlHelper.fontWeight('title', styles === null || styles === void 0 ? void 0 : styles.title['font-weight'])
            + EditorHtmlHelper.textAlign('title', styles === null || styles === void 0 ? void 0 : styles.title['text-align'])
            + EditorHtmlHelper.background('title', (_j = styles === null || styles === void 0 ? void 0 : styles.title) === null || _j === void 0 ? void 0 : _j.background);
        boxes[2].innerHTML = EditorHtmlHelper.visibility('content', (_k = styles === null || styles === void 0 ? void 0 : styles.content) === null || _k === void 0 ? void 0 : _k.visibility)
            + EditorHtmlHelper.padding('content', (_l = styles === null || styles === void 0 ? void 0 : styles.content) === null || _l === void 0 ? void 0 : _l.padding)
            + EditorHtmlHelper.border('content', (_m = styles === null || styles === void 0 ? void 0 : styles.content) === null || _m === void 0 ? void 0 : _m.border)
            + EditorHtmlHelper.radius('content', styles === null || styles === void 0 ? void 0 : styles.content['border-radius'])
            + EditorHtmlHelper.color('content', (_o = styles === null || styles === void 0 ? void 0 : styles.content) === null || _o === void 0 ? void 0 : _o.color)
            + EditorHtmlHelper.fontSize('content', styles === null || styles === void 0 ? void 0 : styles.content['font-size'])
            + EditorHtmlHelper.fontWeight('content', styles === null || styles === void 0 ? void 0 : styles.content['font-weight'])
            + EditorHtmlHelper.textAlign('content', styles === null || styles === void 0 ? void 0 : styles.content['text-align'])
            + EditorHtmlHelper.background('content', (_p = styles === null || styles === void 0 ? void 0 : styles.content) === null || _p === void 0 ? void 0 : _p.background);
        this.box.find('.style-item').each(function () {
            var $this = $(this);
            $this.toggleClass('active', $this.attr('data-id') == data.theme_style_id);
        });
    };
    return EditorPropertyPanel;
}());
var EditorWeightPanel = /** @class */ (function () {
    function EditorWeightPanel(editor) {
        var _this = this;
        this.editor = editor;
        var that = this.editor;
        this.editor.on(EditorEventAfterViewInit, function () {
            _this.editor.emit(EditorEventGetWeights, function (data) {
                _this.renderWeight(data.weights);
                _this.editor.emit(EditorEventGetStyleSuccess, data.styles);
                _this.box.find('.weight-edit-grid').attr('draggable', 'true').on('dragstart', function (e) {
                    e.originalEvent.dataTransfer.setData("Text", e.target.id);
                    that.emit(EditorEventDragStart, $(this));
                });
            });
        });
    }
    EditorWeightPanel.prototype.render = function () {
        this.box = $("<div class=\"panel-item\" data-panel=\"weight\"></div");
        this.box.html("\n            <div class=\"panel-header\">\n                <span class=\"title\">\u90E8\u4EF6</span>\n                <a class=\"fa fa-close\"></a>\n            </div>\n            <div class=\"panel-body\">\n            </div>\n        ");
        return this.box;
    };
    EditorWeightPanel.prototype.renderWeight = function (data) {
        var html = EditorHtmlHelper.mapJoinHtml(data, function (group) {
            var text = EditorHtmlHelper.mapJoinHtml(group.items, function (item) {
                if (!item) {
                    return '';
                }
                var editable = item.editable ? '<a class="edit">编辑</a>' : '';
                return "<div class=\"weight-edit-grid\" data-type=\"weight\" data-weight=\"".concat(item.id, "\">\n                <div class=\"weight-preview\">\n                    <div class=\"thumb\">\n                        <img src=\"").concat(item.thumb, "\" alt=\"").concat(item.name, "\" title=\"").concat(item.description, "\">\n                    </div>\n                    <p class=\"title\">").concat(item.name, "</p>\n                </div>\n                <div class=\"weight-action\">\n                    <a class=\"refresh\">\u5237\u65B0</a>\n                    ").concat(editable, "\n                    <a class=\"property\">\u5C5E\u6027</a>\n                    <a class=\"drag\">\u62D6\u62FD</a>\n                    <a class=\"del\">\u5220\u9664</a>\n                </div>\n                <div class=\"weight-view\">\n                    <img src=\"/assets/images/ajax.gif\" alt=\"\">\n                </div>\n            </div>");
            });
            return "\n            <ul class=\"menu\">\n                <li class=\"expand-box open\">\n                    <div class=\"expand-header\">\n                        ".concat(group.name, "\n                        <span class=\"fa fa-chevron-down\"></span>\n                    </div>\n                    <div class=\"expand-body list-view\">\n                    ").concat(text, "\n                    </div>\n                    </li>\n                </ul>\n            ");
        });
        this.box.find('.panel-body').html(html);
    };
    EditorWeightPanel.prototype.show = function () {
        this.box.removeClass('min');
    };
    EditorWeightPanel.prototype.hide = function () {
        this.box.addClass('min');
    };
    return EditorWeightPanel;
}());
var EditorDialog = /** @class */ (function () {
    function EditorDialog(editor) {
        var _this = this;
        this.editor = editor;
        var that = this;
        this.editor.on(EditorEventViewInit, function () {
            var target = _this.editor.find('.editor-dialog');
            _this.box = target.dialog();
            target.on('click', '.multiple-box .multiple-add-btn', function () {
                var $this = $(this);
                $this.before($this.prev('.item').clone());
            }).on('click', '.multiple-box .multiple-del-btn', function () {
                var $this = $(this);
                if ($this.closest('.multiple-box').find('.item').length > 1) {
                    $this.closest('.item').remove();
                }
            });
            _this.box.on('done', function () {
                _this.editor.emit(EditorEventSaveWeightProperty, target.find('.dialog-body').serialize(), function (data) {
                    that.editor.emit(EditorEventOpenProperty, that.target);
                    that.target.html(data.html);
                });
                _this.box.close();
            });
        }).on(EditorEventOpenEditDialog, function (weight) {
            _this.target = weight;
            _this.editor.emit(EditorEventWeightForm, weight.id(), function (data) {
                _this.box.find('.dialog-body').html('<input type="hidden" name="id" value="' + weight.id() + '">' + data.html);
                _this.box.showCenter();
            });
        });
    }
    return EditorDialog;
}());
var EditorBrowser = /** @class */ (function () {
    function EditorBrowser(editor) {
        var _this = this;
        this.editor = editor;
        this.frameScale = 100;
        this.editor.on(EditorEventViewInit, function () {
            _this.shell = _this.editor.find('.work-container');
            _this.frame = _this.editor.find('.panel-main');
            _this.bindEvent();
        }).on(EditorEventScroll, function (offset, horizontal) {
            if (horizontal) {
                _this.bound.left = -offset;
            }
            else {
                _this.bound.top = -offset;
            }
            _this.shell.css('transform', "translate(".concat(_this.bound.left, "px, ").concat(_this.bound.top, "px)"));
            _this.editor.emit(EditorEventPositionChange, _this.bound.left, _this.bound.top, _this.frameScale);
        }).on(EditorEventResize, function () {
            if (!_this.bound) {
                return;
            }
            _this.resize(_this.bound.width, _this.bound.height);
        }).on(EditorEventDragStart, function (weight) {
            _this.dragWeight = weight;
        });
    }
    EditorBrowser.prototype.bindEvent = function () {
        var _this = this;
        this.frame.on('load', function () {
            _this.frameBody = _this.frame.contents().find('body');
            _this.editor.emit(EditorEventBrowserReady);
            _this.bindFrameEvent();
        });
    };
    EditorBrowser.prototype.bindFrameEvent = function () {
        var that = this;
        this.frameBody.on('dragover', '.weight-row', function (e) {
            e.stopPropagation();
            e.preventDefault();
        }).on('drop', '.weight-row', function (e) {
            e.stopPropagation();
            e.preventDefault();
            var row = $(this);
            if (that.dragWeight) {
                that.selectedWeight = new EditorWeight(that.editor, that.dragWeight.clone());
                that.selectedWeight.appendTo(row);
                return;
            }
            if (that.selectedWeight) {
                that.selectedWeight.moveTo(row);
            }
        }).on('dragover', '.weight-edit-grid', function (e) {
            e.stopPropagation();
            e.preventDefault();
        }).on('drop', '.weight-edit-grid', function (e) {
            e.stopPropagation();
            e.preventDefault();
            var row = $(this);
            if (that.dragWeight) {
                that.selectedWeight = new EditorWeight(that.editor, that.dragWeight.clone());
                that.selectedWeight.appendTo(row.closest('.weight-row'), row);
                return;
            }
            if (that.selectedWeight) {
                that.selectedWeight.moveTo(row.closest('.weight-row'), row);
            }
        }).on('dragstart', '.weight-edit-grid', function (e) {
            e.originalEvent.dataTransfer.setData("Text", e.target.id);
            that.selectedWeight = new EditorWeight(that.editor, $(this));
        }).on('dragend', '.weight-edit-grid', function () {
            $(this).attr('draggable', 'false');
        }).on('mousedown', '.weight-action .drag', function (e) {
            e.stopPropagation();
            that.dragWeight = undefined;
            var weight = $(this).closest('.weight-edit-grid');
            that.selectedWeight = new EditorWeight(that.editor, weight);
            $(this).attr('draggable', 'true');
        }).on('click', '.weight-action .del', function (e) {
            e.stopPropagation();
            that.selectedWeight = new EditorWeight(that.editor, $(this).closest('.weight-edit-grid'));
            that.selectedWeight.tapRemove();
        }).on('click', '.weight-action .edit', function (e) {
            e.stopPropagation();
            that.selectedWeight = new EditorWeight(that.editor, $(this).closest('.weight-edit-grid'));
            that.selectedWeight.tapEdit();
        }).on('click', '.weight-action .refresh', function (e) {
            e.stopPropagation();
            that.selectedWeight = new EditorWeight(that.editor, $(this).closest('.weight-edit-grid'));
            that.selectedWeight.tapRefresh();
        }).on('click', '.weight-action .property', function (e) {
            e.stopPropagation();
            that.selectedWeight = new EditorWeight(that.editor, $(this).closest('.weight-edit-grid'));
            that.selectedWeight.tapProperty();
        }).on('click', 'a', function (e) {
            e.preventDefault();
        });
    };
    /**
     * 反转browser的高和宽
    */
    EditorBrowser.prototype.rotate = function () {
        this.resize(this.bound.height, this.bound.width);
    };
    /**
    * 缩放比例
    * @param val /100
    */
    EditorBrowser.prototype.scale = function (val) {
        this.frameScale = val;
        this.shell.css('transform', 'scale(' + (val / 100) + ')');
        this.editor.emit(EditorEventPositionChange, this.bound.left, this.bound.top, this.frameScale);
    };
    EditorBrowser.prototype.resize = function (left, top, width, height, scale) {
        var maxWidth = this.editor.innerWidth;
        var maxHeight = this.editor.innerHeight;
        if (!width && !height) {
            width = left;
            height = top;
            left = width >= maxWidth ? 0 : (maxWidth - width) / 2;
            top = height >= maxHeight ? 0 : (maxHeight - height) / 2;
        }
        this.shell.css({
            width: width + 'px',
            height: height + 'px',
            transform: "translate(".concat(left, "px, ").concat(top, "px)")
        });
        this.bound = {
            left: left,
            top: top,
            height: height,
            width: width,
        };
        if (scale) {
            this.frameScale = scale;
            this.shell.css('transform', 'scale(' + (scale / 100) + ')');
        }
        this.editor.emit(EditorEventBrowserResize, left, top, width, height, maxWidth, maxHeight);
        this.editor.emit(EditorEventPositionChange, left, top, this.frameScale);
    };
    /**
     * 重置滚动和缩放比例
     */
    EditorBrowser.prototype.reset = function () {
        this.resize(this.bound.width, this.bound.height, 0, 0, 100);
    };
    EditorBrowser.prototype.navigate = function (url) {
        this.frame.attr('src', url);
    };
    EditorBrowser.prototype.navigateString = function (html) {
    };
    /**
     * 获取所有的数据
     * @returns
     */
    EditorBrowser.prototype.serialize = function () {
        if (!this.frameBody) {
            return [];
        }
        var data = [];
        this.frameBody.find('.weight-row').each(function () {
            var row = $(this);
            var parent_id = row.attr('data-id');
            var parent_index = row.attr('data-index');
            row.children('.weight-edit-grid').each(function (index) {
                var item = $(this);
                data.push({
                    id: item.attr('data-id'),
                    parent_id: parent_id,
                    parent_index: parent_index,
                    position: index + 1
                });
            });
        });
        return data;
    };
    return EditorBrowser;
}());
var EditorWeight = /** @class */ (function () {
    function EditorWeight(editor, box) {
        this.editor = editor;
        this.box = box;
    }
    EditorWeight.prototype.toggle = function (state) {
        this.box.toggleClass('weight-edit-mode', state);
        return this;
    };
    EditorWeight.prototype.toggleLoading = function (state) {
        this.box.toggleClass('weight-loading', state);
        return this;
    };
    /**
     * html
     */
    EditorWeight.prototype.html = function (html) {
        var newBox = $(html);
        this.box = this.box.replaceWith(newBox);
        this.box = newBox;
        return this;
    };
    /**
     * id
     */
    EditorWeight.prototype.id = function () {
        return EditorHelper.parseNumber(this.box.attr('data-id'));
    };
    /**
     * weightId
     */
    EditorWeight.prototype.weightId = function () {
        return EditorHelper.parseNumber(this.box.attr('data-weight'));
    };
    EditorWeight.prototype.tapRefresh = function () {
        var _this = this;
        this.toggleLoading(true);
        this.editor.emit(EditorEventRefreshWeight, this.id(), function (data) {
            _this.toggleLoading(false);
            _this.html(data.html);
        }, function () {
            _this.toggleLoading(false);
        });
    };
    EditorWeight.prototype.tapEdit = function () {
        this.editor.emit(EditorEventOpenEditDialog, this);
    };
    EditorWeight.prototype.tapProperty = function () {
        this.editor.emit(EditorEventOpenProperty, this);
    };
    EditorWeight.prototype.tapRemove = function () {
        var _this = this;
        this.editor.emit(EditorEventRemoveWeight, this.id(), function () {
            _this.remove();
        });
    };
    EditorWeight.prototype.moveTo = function (parent, replace) {
        var pos = this.appendToPosition(parent, replace);
        this.editor.emit(EditorEventMoveWeight, {
            id: this.weightId(),
            parent_id: parent.attr('data-id'),
            parent_index: parent.attr('data-index'),
            position: pos
        }, function () {
        });
    };
    EditorWeight.prototype.appendTo = function (parent, replace) {
        var _this = this;
        var pos = this.appendToPosition(parent, replace);
        this.box.width('auto');
        this.toggleLoading(true);
        this.editor.emit(EditorEventAddWeight, {
            weight_id: this.weightId(),
            parent_id: parent.attr('data-id'),
            parent_index: parent.attr('data-index'),
            position: pos
        }, function (data) {
            _this.toggleLoading(false);
            _this.html(data.html);
        }, function () {
            _this.toggleLoading(false);
        });
    };
    EditorWeight.prototype.appendToPosition = function (parent, replace) {
        if (!replace) {
            parent.append(this.box);
            return parent.children().length;
        }
        var i = parent.children().index(replace);
        if (i < 0) {
            parent.append(this.box);
            return parent.children().length;
        }
        this.box.insertBefore(replace);
        return i + 1;
    };
    EditorWeight.prototype.remove = function () {
        this.box.remove();
    };
    return EditorWeight;
}());
var EditorScrollBar = /** @class */ (function () {
    function EditorScrollBar(editor, horizontal) {
        if (horizontal === void 0) { horizontal = true; }
        var _this = this;
        this.editor = editor;
        this.horizontal = horizontal;
        this.baseSize = 8;
        this.left = 0;
        this.maxLeft = 0;
        this.pxScale = 1;
        this.editor.on(EditorEventViewInit, function () {
            _this.element = _this.editor.find(_this.horizontal ? '.h-scroll-bar' : '.v-scroll-bar');
            _this.innerBar = _this.element.find('.inner-bar');
            _this.baseSize = _this.horizontal ? _this.element.height() : _this.element.width();
            _this.innerBar.on('mousedown', function (e) {
                var last = { x: e.clientX, y: e.clientY };
                _this.editor.onMouse(function (p) {
                    var offset = _this.horizontal ? (p.x - last.x) : (p.y - last.y);
                    _this.scroll(_this.left + offset);
                    last = p;
                });
            });
        }).on(EditorEventBrowserResize, function (left, top, width, height, maxWidth, maxHeight) {
            if (_this.horizontal) {
                _this.onRender(left, maxWidth, width, _this.element.width());
            }
            else {
                _this.onRender(top, maxHeight, height, _this.element.height());
            }
        });
    }
    Object.defineProperty(EditorScrollBar.prototype, "barSize", {
        get: function () {
            return this.baseSize;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * 移动多少个像素
     * @param offset
     */
    EditorScrollBar.prototype.move = function (offset) {
        this.scroll(offset / this.pxScale);
    };
    /**
     * 滚动条滑动到多少距离, 不是实际像素
     * @param offset
     */
    EditorScrollBar.prototype.scroll = function (offset) {
        this.left = Math.max(0, Math.min(offset, this.maxLeft));
        this.innerBar.css(this.horizontal ? 'left' : 'top', this.left + 'px');
        this.output();
    };
    /**
     * 移动百分比
     * @param percent /100
     */
    EditorScrollBar.prototype.scrollTo = function (percent) {
        this.scroll(percent * this.maxLeft / 100);
    };
    EditorScrollBar.prototype.output = function () {
        this.editor.emit(EditorEventScroll, this.converter(this.left), this.horizontal);
    };
    /**
     * 滚动条滑动多少距离，转换成实际页面移动多少像素
     * @param offset
     */
    EditorScrollBar.prototype.converter = function (offset) {
        return offset * this.pxScale;
    };
    /**
     *
     * @param viewSize 可见区域的
     * @param pageSize 总页面的
     * @param barSize 滚动条的长度
     */
    EditorScrollBar.prototype.onRender = function (offsetPx, viewSize, pageSize, barSize) {
        if (pageSize <= viewSize) {
            this.maxLeft = 0;
            this.applySize(0, barSize);
            return;
        }
        var minInnerSize = Math.min(6 * this.baseSize, this.baseSize / 2);
        var diff = pageSize - viewSize;
        var barDiff = barSize - diff;
        var innerSize = barDiff <= minInnerSize ? minInnerSize : barDiff;
        this.maxLeft = barSize - innerSize;
        this.pxScale = diff / this.maxLeft;
        this.applySize(offsetPx / this.pxScale, innerSize);
    };
    EditorScrollBar.prototype.applySize = function (offset, size) {
        var _a;
        this.left = Math.max(0, Math.min(offset, this.maxLeft));
        this.innerBar.css((_a = {},
            _a[this.horizontal ? 'left' : 'top'] = offset + 'px',
            _a[this.horizontal ? 'width' : 'height'] = size + 'px',
            _a));
    };
    return EditorScrollBar;
}());
var EditorRuler = /** @class */ (function () {
    function EditorRuler(editor, horizontal) {
        if (horizontal === void 0) { horizontal = true; }
        var _this = this;
        this.editor = editor;
        this.horizontal = horizontal;
        this.offset = 0;
        this.gap = 10;
        this.scale = 1;
        this.foreground = '#333';
        this.background = '#ccc';
        this.baseWidth = 0;
        this.baseX = 0;
        this.baseSize = 16;
        this.editor.on(EditorEventViewInit, function () {
            _this.element = _this.editor.find(_this.horizontal ? '.h-rule-bar' : '.v-rule-bar');
            _this.baseSize = _this.horizontal ? _this.element.height() : _this.element.width();
        }).on(EditorEventResize, function (width, height) {
            _this.refresh();
            _this.onAfterViewInit();
        }).on(EditorEventPositionChange, function (left, top, scale) {
            _this.offset = _this.horizontal ? left : top;
            _this.scale = scale / 100;
            _this.onRender(_this.element[0].getContext('2d'));
        });
    }
    Object.defineProperty(EditorRuler.prototype, "barSize", {
        get: function () {
            return this.baseSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorRuler.prototype, "offsetX", {
        get: function () {
            return this.barSize - this.offset;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * 刷新尺寸
     */
    EditorRuler.prototype.refresh = function () {
        this.baseWidth = this.horizontal ? this.editor.innerWidth : (this.editor.innerHeight + this.barSize);
    };
    EditorRuler.prototype.onAfterViewInit = function () {
        if (this.element.length < 1) {
            return;
        }
        var canvas = this.element[0];
        if (this.horizontal) {
            canvas.width = this.baseWidth;
            canvas.height = this.barSize;
        }
        else {
            canvas.width = this.barSize;
            canvas.height = this.baseWidth;
        }
        this.onRender(canvas.getContext('2d'));
    };
    EditorRuler.prototype.createLine = function (event) {
        var x = (this.horizontal ? event.clientX : event.clientY) - this.baseX;
        return {
            value: x,
            label: Math.floor((x + this.offsetX) / this.scale),
            horizontal: this.horizontal
        };
    };
    EditorRuler.prototype.onRender = function (drawingContext) {
        drawingContext.fillStyle = this.background;
        drawingContext.lineWidth = 2;
        var h = this.barSize;
        if (this.horizontal) {
            drawingContext.fillRect(0, 0, this.baseWidth, h);
        }
        else {
            drawingContext.fillRect(0, 0, h, this.baseWidth);
        }
        var gap = this.gap * this.scale;
        var count = Math.ceil(this.baseWidth / gap);
        var start = Math.ceil(this.offsetX / gap);
        var fontSize = h * .3;
        for (var i = 0; i < count; i++) {
            var real = start + i;
            var hasLabel = real % 5 == 0;
            var x = (real * gap - this.offsetX);
            var y = h * (hasLabel ? .6 : .4);
            if (this.horizontal) {
                this.drawLine(drawingContext, { x: x, y: 0 }, { x: x, y: y }, this.foreground);
                if (hasLabel) {
                    this.drawText(drawingContext, (real * this.gap).toString(), fontSize, this.foreground, { x: x, y: y });
                }
            }
            else {
                this.drawLine(drawingContext, { x: 0, y: x }, { x: y, y: x }, this.foreground);
                if (hasLabel) {
                    this.drawText(drawingContext, (real * this.gap).toString(), fontSize, this.foreground, { x: y - fontSize * 2, y: x });
                }
            }
        }
    };
    EditorRuler.prototype.drawText = function (context, text, font, color, point) {
        context.font = "normal normal bold ".concat(font, "px");
        context.fillStyle = color;
        context.fillText(text, point.x, point.y + font);
    };
    EditorRuler.prototype.drawLine = function (context, move, line, color) {
        context.beginPath();
        context.strokeStyle = color;
        context.moveTo(move.x, move.y);
        context.lineTo(line.x, line.y);
        context.stroke();
    };
    return EditorRuler;
}());
var EditorHelper = /** @class */ (function () {
    function EditorHelper() {
    }
    EditorHelper.twoPad = function (i) {
        return i < 10 && i >= 0 ? '0' + i : i.toString();
    };
    /**
    * 格式化数字
    * @param val
    * @returns
    */
    EditorHelper.parseNumber = function (val) {
        if (!val || isNaN(val)) {
            return 0;
        }
        if (typeof val === 'number') {
            return val;
        }
        if (typeof val === 'boolean') {
            return val ? 1 : 0;
        }
        if (typeof val !== 'string') {
            val = val.toString();
        }
        if (val.indexOf(',') > 0) {
            val = val.replace(/,/g, '');
        }
        if (val.indexOf('.') > 0) {
            val = parseFloat(val);
        }
        else {
            val = parseInt(val, 10);
        }
        return isNaN(val) ? 0 : val;
    };
    EditorHelper.checkRange = function (val, min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 100; }
        if (val < min) {
            return min;
        }
        if (max > min && val > max) {
            return max;
        }
        return val;
    };
    /**
    * 深层次复制对象
    */
    EditorHelper.cloneObject = function (val) {
        if (typeof val !== 'object') {
            return val;
        }
        if (val instanceof Array) {
            return val.map(function (item) {
                return EditorHelper.cloneObject(item);
            });
        }
        var res = {};
        for (var key in val) {
            if (Object.prototype.hasOwnProperty.call(val, key)) {
                res[key] = EditorHelper.cloneObject(val[key]);
            }
        }
        return res;
    };
    /**
    * 遍历对象属性或数组
    */
    EditorHelper.eachObject = function (obj, cb) {
        if (typeof obj !== 'object') {
            return cb(obj, undefined);
        }
        if (obj instanceof Array) {
            for (var i = 0; i < obj.length; i++) {
                if (cb(obj[i], i) === false) {
                    return false;
                }
            }
            return;
        }
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                if (cb(obj[key], key) === false) {
                    return false;
                }
            }
        }
    };
    return EditorHelper;
}());
var EditorHtmlHelper = /** @class */ (function () {
    function EditorHtmlHelper() {
    }
    EditorHtmlHelper.guid = function () {
        return EditorHtmlHelper._guid++;
    };
    EditorHtmlHelper.mapJoinHtml = function (data, cb) {
        var html = '';
        EditorHelper.eachObject(data, function (val, key) {
            html += cb(val, key);
        });
        return html;
    };
    EditorHtmlHelper.title = function (val) {
        if (val === void 0) { val = ''; }
        var id = 'title_' + EditorHtmlHelper.guid();
        return EditorHtmlHelper.input(id, '标题', EditorHtmlHelper.text(id, 'title', val));
    };
    EditorHtmlHelper.lazy = function (val) {
        var id = 'settings_lazy_' + EditorHtmlHelper.guid();
        return EditorHtmlHelper.input(id, '懒加载', EditorHtmlHelper.radio(id, 'settings[lazy]', ['关闭', '开启'], !val ? 0 : val));
    };
    EditorHtmlHelper.margin = function (vals) {
        if (vals === void 0) { vals = []; }
        return EditorHtmlHelper.sideInput('settings[style][margin]', '外边距', vals);
    };
    EditorHtmlHelper.padding = function (name, vals) {
        if (vals === void 0) { vals = []; }
        return EditorHtmlHelper.sideInput('settings[style][' + name + '][padding]', '内边距', vals);
    };
    EditorHtmlHelper.position = function (data) {
        var html = EditorHtmlHelper.positionSide(data === null || data === void 0 ? void 0 : data.type, data === null || data === void 0 ? void 0 : data.value);
        var option = EditorHtmlHelper.option({
            static: '无',
            relative: '相对定位',
            absolute: '绝对定位',
            fixed: '固定定位'
        }, data === null || data === void 0 ? void 0 : data.type);
        return EditorHtmlHelper.input('', '悬浮', "<select name=\"settings[style][position][type]\">".concat(option, "</select><div class=\"side-input\">").concat(html, "</div>"), 'position-input');
    };
    EditorHtmlHelper.positionSide = function (type, value) {
        return type && type != 'static' ? EditorHtmlHelper.side('settings[style][position][value]', 'settings[style][position][value]', value) : '';
    };
    EditorHtmlHelper.border = function (name, data) {
        name = 'settings[style]' + (name ? '[' + name + ']' : '') + '[border]';
        var id = EditorHtmlHelper.nameToId(name) + '_' + EditorHtmlHelper.guid();
        var html = EditorHtmlHelper.checkbox(id, name + '[side][]', ['上', '右', '下', '左'], data === null || data === void 0 ? void 0 : data.side);
        var option = EditorHtmlHelper.option(['实线', '虚线'], data && data.value && data.value[1] == 1 ? 1 : 0);
        return EditorHtmlHelper.input(id, '边框', "<input type=\"text\" class=\"form-control\" name=\"".concat(name, "[value][]\" value=\"").concat(data === null || data === void 0 ? void 0 : data.value[0], "\" placeholder=\"\u7C97\u7EC6\" size=\"4\"><select name=\"").concat(name, "[value][]\">").concat(option, "</select><input type=\"color\" name=\"").concat(name, "[value][]\" value=\"").concat(data === null || data === void 0 ? void 0 : data.value[2], "\"><div class=\"side-input\">").concat(html, "</div>\n        "));
    };
    EditorHtmlHelper.radius = function (name, data) {
        name = 'settings[style]' + (name ? '[' + name + ']' : '') + '[border-radius]';
        var id = EditorHtmlHelper.nameToId(name) + '_' + EditorHtmlHelper.guid();
        return EditorHtmlHelper.input(id, '圆角', "<input type=\"text\" id=\"".concat(id, "_0\" class=\"form-control \" name=\"").concat(name, "[]\" value=\"\" size=\"4\" placeholder=\"\u5DE6\u4E0A\">\n        <input type=\"text\" id=\"").concat(id, "_1\" class=\"form-control \" name=\"").concat(name, "[]\" value=\"\" size=\"4\" placeholder=\"\u53F3\u4E0A\">\n        <br/>\n        <input type=\"text\" id=\"").concat(id, "_2\" class=\"form-control \" name=\"").concat(name, "[]\" value=\"\" size=\"4\" placeholder=\"\u5DE6\u4E0B\">\n        <input type=\"text\" id=\"").concat(id, "_3\" class=\"form-control \" name=\"").concat(name, "[]\" value=\"\" size=\"4\" placeholder=\"\u53F3\u4E0B\">"));
    };
    EditorHtmlHelper.color = function (name, data) {
        name = 'settings[style]' + (name ? '[' + name + ']' : '') + '[color]';
        var id = EditorHtmlHelper.nameToId(name) + '_' + EditorHtmlHelper.guid();
        return EditorHtmlHelper.input(id, '字体颜色', EditorHtmlHelper.radio(id, name + '[type]', ['无', '有'], data === null || data === void 0 ? void 0 : data.type) + "<input type=\"color\" name=\"".concat(name, "[value]\" value=\"").concat(data === null || data === void 0 ? void 0 : data.value, "\">"));
    };
    EditorHtmlHelper.background = function (name, data) {
        name = 'settings[style]' + (name ? '[' + name + ']' : '') + '[background]';
        var id = EditorHtmlHelper.nameToId(name) + '_' + EditorHtmlHelper.guid();
        var html = EditorHtmlHelper.radio(id, name + '[type]', ['无', '颜色', '图片'], '0') + '<div class="value-input">' + EditorHtmlHelper.backgroundValue(name, data === null || data === void 0 ? void 0 : data.type) + '</div>';
        return EditorHtmlHelper.input(id, '背景', html, 'background-input');
    };
    EditorHtmlHelper.backgroundValue = function (name, type) {
        if (!type || type < 1) {
            return '';
        }
        if (type == 2) {
            return "<div class=\"file-input\">\n            <input type=\"text\" class=\"form-control \" name=\"".concat(name, "[value]\" value=\"\" size=\"10\">\n            <button type=\"button\" data-type=\"upload\">\u4E0A\u4F20</button>\n        </div>");
        }
        ;
        return "<input type=\"color\" name=\"".concat(name, "[value]\">");
    };
    EditorHtmlHelper.visibility = function (name, val) {
        name = 'settings[style][' + name + '][visibility]';
        var id = EditorHtmlHelper.nameToId(name) + '_' + EditorHtmlHelper.guid();
        return EditorHtmlHelper.input(id, '可见', EditorHtmlHelper.radio(id, name, ['显示', '隐藏'], val));
    };
    EditorHtmlHelper.fontSize = function (name, val) {
        name = 'settings[style][' + name + '][font-size]';
        var id = EditorHtmlHelper.nameToId(name) + '_' + EditorHtmlHelper.guid();
        return EditorHtmlHelper.input(id, '字体大小', EditorHtmlHelper.text(id, name, val, 4));
    };
    EditorHtmlHelper.textAlign = function (name, val) {
        name = 'settings[style][' + name + '][text-align]';
        var id = EditorHtmlHelper.nameToId(name) + '_' + EditorHtmlHelper.guid();
        return EditorHtmlHelper.input(id, '字体位置', EditorHtmlHelper.radio(id, name, ['居左', '居中', '居右'], !val ? 0 : val));
    };
    EditorHtmlHelper.fontWeight = function (name, val) {
        name = 'settings[style][' + name + '][font-weight]';
        var id = EditorHtmlHelper.nameToId(name) + '_' + EditorHtmlHelper.guid();
        return EditorHtmlHelper.input(id, '字体粗细', EditorHtmlHelper.text(id, name, val, 4));
    };
    EditorHtmlHelper.option = function (items, selected) {
        var html = '';
        $.each(items, function (i) {
            var sld = selected == i ? ' selected' : '';
            html += "<option value=\"".concat(i, "\"").concat(sld, ">").concat(this, "</option>");
        });
        return html;
    };
    EditorHtmlHelper.sideInput = function (name, label, vals) {
        if (vals === void 0) { vals = []; }
        var id = EditorHtmlHelper.nameToId(name) + '_' + EditorHtmlHelper.guid();
        return EditorHtmlHelper.input(id, label, EditorHtmlHelper.side(id, name, vals), 'side-input');
    };
    EditorHtmlHelper.side = function (id, name, vals) {
        if (vals === void 0) { vals = []; }
        var html = '';
        $.each(['上', '右', '下', '左'], function (i) {
            var val = vals && vals.length > i ? vals[i] : '';
            html += "<input type=\"text\" id=\"".concat(id, "_").concat(i, "\" class=\"form-control \" name=\"").concat(name, "[]\" size=\"4\" value=\"").concat(val, "\" placeholder=\"").concat(this, "\">");
        });
        return html;
    };
    EditorHtmlHelper.radio = function (id, name, items, selected) {
        var html = '';
        var j = 0;
        $.each(items, function (i) {
            var index = [id, j++].join('_');
            var chk = i == selected ? ' checked' : '';
            html += "<span class=\"radio-label\"><input type=\"radio\" id=\"".concat(index, "\" name=\"").concat(name, "\" value=\"").concat(i, "\"").concat(chk, "><label for=\"").concat(index, "\">").concat(this, "</label></span>");
        });
        return html;
    };
    EditorHtmlHelper.checkbox = function (id, name, items, val) {
        if (val === void 0) { val = []; }
        var html = '';
        var j = 0;
        $.each(items, function (i) {
            var index = [id, j++].join('_');
            var chk = val && val.indexOf(i) >= 0 ? ' checked' : '';
            html += "<span class=\"check-label\"><input type=\"checkbox\" id=\"".concat(index, "\" name=\"").concat(name, "\" value=\"").concat(i, "\"").concat(chk, "><label for=\"").concat(index, "\">").concat(this, "</label></span>");
        });
        return html;
    };
    EditorHtmlHelper.text = function (id, name, val, size) {
        if (val === void 0) { val = ''; }
        var option = size ? " size=\"".concat(size, "\"") : '';
        if (!val) {
            val = '';
        }
        return "<input type=\"text\" id=\"".concat(id, "\" class=\"form-control\" name=\"").concat(name, "\" value=\"").concat(val, "\"").concat(option, ">");
    };
    EditorHtmlHelper.input = function (id, name, content, cls) {
        if (cls === void 0) { cls = ''; }
        return "<div class=\"input-group\"><label for=\"".concat(id, "\">").concat(name, "</label><div class=\"").concat(cls, "\">").concat(content, "</div></div>");
    };
    EditorHtmlHelper.nameToId = function (name) {
        return name.replace(/\[/g, '_').replace(/\]/g, '');
    };
    EditorHtmlHelper._guid = 0;
    return EditorHtmlHelper;
}());
